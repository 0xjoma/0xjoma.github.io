<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-09-23T21:24:25-10:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">From Bytes to Blogs</title><subtitle>Aspiring cybersecurity expert and student delving deep into the world of digital defense. Discover my academic projects, insights from my learning journey, and my passion for ensuring a safer online experience.
</subtitle><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><entry><title type="html">The Eratosthenes Method</title><link href="http://localhost:4000/academic/2024/09/07/the-eratosthenes-method.html" rel="alternate" type="text/html" title="The Eratosthenes Method" /><published>2024-09-07T00:00:00-10:00</published><updated>2024-09-07T00:00:00-10:00</updated><id>http://localhost:4000/academic/2024/09/07/the-eratosthenes-method</id><content type="html" xml:base="http://localhost:4000/academic/2024/09/07/the-eratosthenes-method.html"><![CDATA[<h1 id="purpose">Purpose</h1>
<p>Prime numbers form an integral part of cryptographic frameworks as they are the basic building blocks of some of our cryptography algorithms. There are many ways to compute prime numbers. In this homework, you will modify a Python program that computes the prime numbers in a range, then you will analyze its output. Your modifications will include implementing an additional algorithm (called the sieve of Eratosthenes method) to compute primes. In addition to giving you some practice with prime number generation, this homework will also serve as a gentle introduction to structured programming in Python.</p>

<h1 id="steps">Steps</h1>

<ol>
  <li>Add a method to the code  that will implement the sieve of Eratosthenes method for computing primes.</li>
  <li>Test your method to ensure that it works correctly. Print out or attach the list of primes generated by your program for =100.</li>
  <li>Add code that will call your new method along with the brute force method and measure the time taken for both algorithms to generate for =200,000. Comment on the results you see. (e.g., Which is greater or smaller? Why does one take more time than the other? How might this scale if we increased n significantly, say to 10 million?)</li>
  <li>Plot the primes generated by your method in a histogram. You may replace the plot of the brute force algorithm already displayed. Comment on the distribution of primes. (e.g., Are the primes evenly distributed? Do they tend to occur in a specific range plotted?)</li>
</ol>

<h1 id="algorithm">Algorithm</h1>
<ul>
  <li>Create a list of consecutive integers from 2 through n: (2, 3, 4, …, ).</li>
  <li>Initially, let p equal 2, the smallest prime number.</li>
  <li>Enumerate the multiples of p by counting in increments of p from 2p to , and mark them in the list (these will be 2p, 3p, 4p, …;  p itself should not be marked).</li>
  <li>Find the smallest number in the list greater than p that is not marked. If there was no such number, stop. Otherwise, let p now equal this new number (which is the next prime) and repeat from step 3.</li>
  <li>When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.</li>
</ul>

<h1 id="requirements">Requirements</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">default_timer</span> <span class="k">as</span> <span class="n">timer</span>
</code></pre></div></div>

<p>Source files can be found <a class="page-link" href="https://github.com/0xjoma/academiaProjects/tree/main/Module_01_coding_Assignment_The_Erastosthenes_Method/" target="_blank" rel="noopener noreferrer">here</a>.</p>

<p>View my <a class="page-link" href="https://jomaelortizperez.com/" target="_blank" rel="noopener noreferrer">cv</a>.</p>]]></content><author><name>[&quot;Jomael Ortiz Perez (0xjoma)&quot;]</name></author><category term="Academic" /><summary type="html"><![CDATA[Purpose Prime numbers form an integral part of cryptographic frameworks as they are the basic building blocks of some of our cryptography algorithms. There are many ways to compute prime numbers. In this homework, you will modify a Python program that computes the prime numbers in a range, then you will analyze its output. Your modifications will include implementing an additional algorithm (called the sieve of Eratosthenes method) to compute primes. In addition to giving you some practice with prime number generation, this homework will also serve as a gentle introduction to structured programming in Python.]]></summary></entry><entry><title type="html">Analyzing Network Protocols Using Wireshark and Netwitness Investigator</title><link href="http://localhost:4000/academic/2024/08/10/analyzing-network-protocols.html" rel="alternate" type="text/html" title="Analyzing Network Protocols Using Wireshark and Netwitness Investigator" /><published>2024-08-10T00:00:00-10:00</published><updated>2024-08-10T00:00:00-10:00</updated><id>http://localhost:4000/academic/2024/08/10/analyzing-network-protocols</id><content type="html" xml:base="http://localhost:4000/academic/2024/08/10/analyzing-network-protocols.html"><![CDATA[<h1 id="purpose">Purpose</h1>
<p>When it comes to network security, every professional needs to be familiar with the two most widely used tools in the industry:</p>

<table>
  <thead>
    <tr>
      <th>Wireshark (WS)</th>
      <th>RSA Net Witness Investigator (NWI)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>WS is basically a packet capture and analysis software and is the world’s foremost and widely-used network protocol analyzer. It lets you see what’s happening on your network at a microscopic level and is the de facto standard across many commercial and non-profit enterprises, government agencies, and educational institutions.</td>
      <td>NWI is an interactive threat analysis application that provides security operations staff, auditors, and fraud and forensics investigators the power to perform unprecedented free-form contextual analysis of raw network data captured and reconstructed by the NetWitness NextGen infrastructure. While WS helps you analyze network data at the microscopic level, NWI provides you with a high-level overview making network forensics much easier.</td>
    </tr>
  </tbody>
</table>

<p>In this lab assignment, I will analyze network protocols using WS and NWI tools. Upon completing this lab, I will be able to:</p>

<ul>
  <li>Use basic features of WS and NWI.</li>
  <li>Capture, filter and analyze basic network protocols.</li>
  <li>Differentiate use cases for WS and NWI.</li>
</ul>

<h1 id="instructions">Instructions</h1>
<h2 id="lab-configuration">Lab Configuration</h2>
<ol>
  <li>Parent VM: (this is the machine, I connect when login-in in to the virtual lab)</li>
  <li>Child VM-1: Windows 10 - referred to as VM-1</li>
  <li>Child VM-3: Metasploitable - referred to as VM-3</li>
</ol>

<h2 id="lab-tasks">Lab Tasks</h2>
<p><strong>Task 1:</strong> Capture live traffic (network trace) on VM-1.</p>

<p><strong>Task 2:</strong> Capture live traffic for a “continuous ping test” from VM-1 to VM-3.</p>
<ul>
  <li>On VM-1, open the command prompt, type <code class="language-plaintext highlighter-rouge">ping 172.30.0.15 /t</code>, and press <code class="language-plaintext highlighter-rouge">enter</code>.</li>
</ul>

<p><strong>Task 3:</strong> Capture live traffic only for remote desktop connection from Parent-VM to VM-1</p>
<ul>
  <li>From Parent VM, click on the remote desktop connection “Windows 10 VM” to log into VM-1.</li>
</ul>

<p><strong>Task 4:</strong> Capture browser traffic on Parent VM.</p>
<ul>
  <li>From Parent VM, launch the Chrome browser and visit the website <code class="language-plaintext highlighter-rouge">https://uwex.wisconsin.edu/cybersecurity/</code> and browse through a few pages</li>
  <li>From Wireshark, find the packet with uwex.wisconsin.edu string in the packet details</li>
  <li>Take and save a screen capture clearly showing the raw data with the said string as you will use it as input for subsequent task.</li>
</ul>

<p><strong>Task 5:</strong> Import capture from <em>Task 4</em> into <em>NetWitness Investigator</em> (NWI) and got to packet details for <code class="language-plaintext highlighter-rouge">Hostname Aliases = "uwex.wisconsin.edu"</code>
Provide the values for the following:</p>
<ul>
  <li><strong>Cipher name:</strong></li>
  <li><strong>Source IP address:</strong></li>
  <li><strong>Destination IP address:</strong></li>
  <li><strong>TCP Source Port:</strong></li>
  <li><strong>TCP Destination Port:</strong></li>
  <li><strong>Destination City:</strong></li>
  <li><strong>Destination Organization:</strong></li>
  <li><strong>How many sessions were recorded in your capture:</strong></li>
  <li><strong>Click on the session count and provide a screen capture using hybrid view for the sessions.</strong></li>
</ul>

<p><strong>Task 6:</strong> Based on the packet detailes provided by Wireshark (WS) and NWI in <em>Tasks 4</em> and <strong>Tasks 5</strong> for <code class="language-plaintext highlighter-rouge">uwex.wisconsin.edu</code></p>
<ul>
  <li>List three differences between WS and NWI. In your opinion, which one makes it easy to read the details?</li>
  <li>Which tool would you prefer to use if you were doing a quick analysis for your home wireless network to determine all the outgoing connections? List three reasons for your choice of tool.</li>
  <li>Which tool would you prefer if oyu were doing a ping test to a remote host? Explain your reasons.</li>
</ul>

<h1 id="tasks-submissions">Tasks Submissions</h1>
<h4 id="task-1-capture-live-traffic">Task 1: Capture Live Traffic</h4>

<p><img src="/assets/analyzing-network-protocols/task1NetworkTraffic.png" alt="Task 1, Screenshot Capture Live Traffic" /></p>

<h4 id="task-2-capture-live-traffic-for-continuous-ping-test">Task 2: Capture Live Traffic For Continuous Ping Test</h4>

<p><img src="/assets/analyzing-network-protocols/task2CaptureLiveTrafficForAContinuousPingTest.png" alt="Task 2, Screenshot Capture Live Traffic For Continuous Ping Test" /></p>

<h4 id="task-3-capture-live-traffic-only-for-a-remote-desktop-connection-from-parent-vm-to-vm-1">Task 3: Capture Live Traffic Only For a Remote Desktop Connection From Parent-VM to VM-1</h4>

<p><img src="/assets/analyzing-network-protocols/task3CaptureLivetrafficOnlyForARemoteDesktopConnectionFromParentVmToVm1.png" alt="Task 3, Screenshot Capture Live Traffic Only For a Remote Desktop Connection From Parent-VM to VM-1" /></p>

<h4 id="task-4-capture-browser-traffic-on-parent-vm">Task 4: Capture Browser Traffic on Parent VM</h4>

<p><img src="/assets/analyzing-network-protocols/task4CaptureBrowserTrafficOnParentVM.png" alt="Task 4, Screenshot Capture Browser Traffic on Parent VM" /></p>

<h4 id="task-5-import-capture-from-task-4-into-netwitness-investigator-nwi-and-got-to-packet-details-for-hostname-aliases--uwexwisconsinedu">Task 5: Import capture from <em>Task 4</em> into *NetWitness Investigator (NWI) and got to packet details for <code class="language-plaintext highlighter-rouge">Hostname Aliases = "uwex.wisconsin.edu"</code></h4>

<ul>
  <li><strong>Cipher name:</strong> <code class="language-plaintext highlighter-rouge">tls 1.2 (3)</code></li>
  <li><strong>Source IP address:</strong> <code class="language-plaintext highlighter-rouge">192.168.202.249</code></li>
  <li><strong>Destination IP address:</strong> <code class="language-plaintext highlighter-rouge">128.104.80.21</code></li>
  <li><strong>TCP Source Port:</strong> <code class="language-plaintext highlighter-rouge">TCP</code></li>
  <li><strong>TCP Destination Port:</strong> <code class="language-plaintext highlighter-rouge">443 (HTTPS)</code></li>
  <li><strong>Destination City:</strong> <code class="language-plaintext highlighter-rouge">(3)</code></li>
  <li><strong>Destination Organization:</strong> <code class="language-plaintext highlighter-rouge">University of Wisconsin Madison</code></li>
  <li><strong>How many sessions were recorded in your capture:</strong> <code class="language-plaintext highlighter-rouge">(3)</code></li>
  <li><strong>Provide a screen capture using hybrid view for the sessions.</strong> (Screenshot Below)</li>
</ul>

<p><img src="/assets/analyzing-network-protocols/task5HybridView.png" alt="Task 5, Screenshot Last Bullet Hybrid View" /></p>

<h4 id="task-6-tool-differences-and-preferences">Task 6: Tool Differences and Preferences</h4>

<p><strong>Question one answer</strong></p>

<ol>
  <li>WS presents a more traditional, detailed interface focusing on raw packet data.</li>
  <li>NWI offers a more graphical interface with visual tools that help quickly identify patterns and relationships within the network traffic, making it more accessible for quick reviews and overviews.</li>
  <li>WS display data at a granular level, allowing users to see every bit of packet data in a structure format. This is useful for detailed analysis and troubleshooting.</li>
</ol>

<p>(a)	In my opinion, WS makes it easier to read detailed packet information. It provides exhaustive protocol decoding capabilities and allow users to dissect each packet layer by layer, which is indispensable for understanding specific network issues or varifying network operations at the byte level.</p>

<p><strong>Questions two answer</strong></p>

<p>(a)	I would prefer WS.</p>
<ol>
  <li>Real-time packet capture and analysis</li>
  <li>Extensive filtering and search capabilities</li>
  <li>Detailed protocol support</li>
</ol>

<p><strong>Question three answer</strong></p>

<p>(a)	I would again prefer WS.</p>

<ol>
  <li>Detailed view of ICMP traffic
a.	WS provides a detailed view of ICMP traffic, allowing me to observe the request and reply packets in detail.</li>
  <li>Capability to analyze network performance issues
a.	This tool allows for an in-depth examination of network performance issues, such as jitter or routing problems.</li>
  <li>Comprehensive filtering options
a.	It allows me to easily set up filters to show only ICMP traffic, which simplifies the analysis and helps solely focus on ping test results.</li>
</ol>

<p>This concludes my lab. Feel free to connect with me and thank you for reading.</p>

<p>View my <a class="page-link" href="https://jomaelortizperez.com/" target="_blank" rel="noopener noreferrer">cv</a>.</p>]]></content><author><name>[&quot;Jomael Ortiz Perez (0xjoma)&quot;]</name></author><category term="Academic" /><summary type="html"><![CDATA[Purpose When it comes to network security, every professional needs to be familiar with the two most widely used tools in the industry:]]></summary></entry><entry><title type="html">Governance and Law Enforcement in Cyberspace: A Critical Analysis of Cybersecurity Legislation and Policy Implementation</title><link href="http://localhost:4000/jekyll/update/2024/01/02/governance-and-law.html" rel="alternate" type="text/html" title="Governance and Law Enforcement in Cyberspace: A Critical Analysis of Cybersecurity Legislation and Policy Implementation" /><published>2024-01-02T00:00:00-10:00</published><updated>2024-01-02T00:00:00-10:00</updated><id>http://localhost:4000/jekyll/update/2024/01/02/governance-and-law</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/01/02/governance-and-law.html"><![CDATA[<h2 id="project-description">Project Description</h2>

<p>This project delves into cyberspace governance’s complex and dynamic realm, focusing on the legal and policy frameworks that govern cybersecurity. It explores the unique challenges posed by the Internet’s transcendence of traditional national boundaries and examines how various entities contribute to creating and enforcing laws in this digital domain.</p>

<h2 id="objectives">Objectives:</h2>
<ul>
  <li>To identify the entities responsible for creating laws applicable to cyberspace and cybersecurity.</li>
  <li>To analyze the laws that apply when cybercrime crosses national and international boundaries and understand their importance.</li>
  <li>To investigate who creates and enforces policies in cyberspace and cybersecurity.</li>
</ul>

<h2 id="key-components">Key Components:</h2>

<ol>
  <li><strong>Role of National Governments and International Organizations:</strong>
    <ul>
      <li>Examines the multifaceted roles of national governments in formulating laws and regulations within their jurisdictions.</li>
      <li>Discuss the influence of international organizations in shaping global policies and standards, focusing on entities like the United Nations, the European Union, and the Council of Europe.</li>
    </ul>
  </li>
  <li><strong>Cybercrime Across Borders:</strong>
    <ul>
      <li>Analyzes international treaties and conventions, such as the Budapest Convention, and their role in addressing transnational cybercrime.</li>
      <li>Explores the significance of mutual legal assistance and laws with extraterritorial application in combating cybercrime that crosses borders.</li>
    </ul>
  </li>
  <li><strong>Policy Creation and Law Enforcement:</strong>
    <ul>
      <li>Scrutinizes the roles of various national and international agencies, including law enforcement bodies, in creating and enforcing cyber policies.</li>
      <li>Highlights the involvement of the private sector and industry groups in shaping and complying with cybersecurity practices.</li>
    </ul>
  </li>
  <li><strong>Case Studies:</strong>
    <ul>
      <li>Provides detailed analyses of real-world incidents, such as the Sony Pictures hack and the WannaCry ransomware attack, to illustrate the practical challenges and successes in implementing cybersecurity measures and international cooperation.</li>
    </ul>
  </li>
</ol>

<h2 id="methodology">Methodology:</h2>

<ul>
  <li>Extensive research utilizing the CSU Online Library and the Internet.</li>
  <li>Analysis of laws, treaties, and policy documents.</li>
  <li>Case study examination for practical insights.</li>
</ul>

<h2 id="expected-outcomes">Expected Outcomes:</h2>

<ul>
  <li>A comprehensive understanding of the current state of cyberspace governance.</li>
  <li>Insights into the complexities and challenges in creating and enforcing laws in a globally connected digital environment.</li>
  <li>Recommendations for enhancing international cooperation and policy effectiveness in the field of cybersecurity.</li>
</ul>

<h2 id="relevance-to-course">Relevance to Course</h2>

<p>This project is directly relevant to the course ‘Critical Infrastructure Protection in Cybersecurity’ as it addresses the legal and policy aspects of protecting critical digital infrastructure against cyber threats. Studying how cybersecurity laws and policies are formulated and enforced is crucial for understanding and safeguarding critical infrastructure in the digital age.</p>

<p><a href="/assets/governance-and-law/Cybersecurity%20Policies%20Without%20Borders.docx">Download My Project</a></p>]]></content><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Project Description]]></summary></entry><entry><title type="html">Mastering the Art of RFP Creation: My Capstone Project in Healthcare Technology</title><link href="http://localhost:4000/jekyll/update/2024/01/01/rfp-creation.html" rel="alternate" type="text/html" title="Mastering the Art of RFP Creation: My Capstone Project in Healthcare Technology" /><published>2024-01-01T00:00:00-10:00</published><updated>2024-01-01T00:00:00-10:00</updated><id>http://localhost:4000/jekyll/update/2024/01/01/rfp-creation</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/01/01/rfp-creation.html"><![CDATA[<h2 id="project-description">Project Description</h2>

<p>In my recent capstone project, I embarked on an ambitious journey to design a Request for Proposal (RFP) for a hypothetical but innovative project in the healthcare technology sector. The focal point of this project was the development of an Integrated Patient Data Management System (IPDMS) aimed at enhancing healthcare delivery through advanced technology solutions.</p>

<h2 id="objective">Objective</h2>

<p>The primary objective was to conceptualize a healthcare technology solution and masterfully craft an RFP detailing the requirements, expectations, and criteria for this complex project. This involved deep research into the healthcare sector, understanding the nuances of data management systems, and translating these into a comprehensive, clear, and actionable RFP document.</p>

<h2 id="key-components">Key Components</h2>

<ol>
  <li><strong>RFP Development:</strong> I meticulously developed each section of the RFP, ensuring clarity and precision in communicating the project’s needs. This included company overview, project objectives, scope, timelines, budget constraints, and vendor qualifications.</li>
  <li><strong>Cybersecurity Framework:</strong> Recognizing the critical importance of data security in healthcare, I integrated a detailed cybersecurity framework within the RFP. This outlined various security controls and risk management strategies tailored to the healthcare industry’s standards.</li>
  <li><strong>Vendor Selection Criteria:</strong> A significant part of the project was establishing stringent vendor qualifications and submission guidelines to attract competent and experienced vendors capable of executing such a specialized project.</li>
  <li><strong>Risk Analysis:</strong> Conducting a thorough risk analysis was crucial. I identified potential threats and developed strategies to mitigate these risks, ensuring the longevity and reliability of the IPDMS.</li>
  <li><strong>Gap Analysis and Security Controls:</strong> I performed a gap analysis to pinpoint discrepancies between current security measures and desired standards. This led to the formulation of specific security controls addressing the identified gaps.</li>
  <li><strong>Milestones and Deadlines:</strong> The project was strategically planned with defined milestones and deadlines, reflecting a realistic and achievable timeline for deploying the IPDMS.</li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>This capstone project demonstrated my ability to create a detailed and comprehensive RFP and is a testament to my understanding of the intricate balance between technical requirements and strategic planning in the healthcare technology realm. It exemplified my skills in project planning, cybersecurity awareness, and effective communication – crucial attributes for anyone venturing into technology project management.</p>

<p><a href="/assets/rfp-project/RFP_and_Cyber_Security_Framework.docx">Download My Project</a></p>]]></content><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Project Description]]></summary></entry><entry><title type="html">Uncovering New Evidence Using Bootable Forensic Utilities</title><link href="http://localhost:4000/jekyll/update/2023/12/11/uncovering-new-evidence-using-bootable-forensic-utilities.html" rel="alternate" type="text/html" title="Uncovering New Evidence Using Bootable Forensic Utilities" /><published>2023-12-11T00:00:00-10:00</published><updated>2023-12-11T00:00:00-10:00</updated><id>http://localhost:4000/jekyll/update/2023/12/11/uncovering-new-evidence-using-bootable-forensic-utilities</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/12/11/uncovering-new-evidence-using-bootable-forensic-utilities.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>In the ever-evolving realm of Digital Forensics, the use of sophisticated forensic software tools stands at the forefront of uncovering pivotal evidence in computer-related crimes. My recent experience in a Digital Forensics class, involving a hands-on lab session, offered a deep dive into this intriguing and crucial aspect of digital investigation. The lab was not only educational but also immensely engaging, providing a practical perspective on how different tools are employed in the field of digital forensics.</p>

<p>Digital Forensics, primarily concerned with the recovery and investigation of material found in digital devices, plays a critical role in solving crimes that involve digital evidence. The lab focused on demonstrating the functionalities and applications of various forensic tools, each uniquely designed to aid in the meticulous process of evidence extraction and analysis. This report will delve into the specifics of the lab, the tools used, and the insights gained from this practical exposure to the world of digital forensic investigation.</p>

<h2 id="tools-used">Tools Used</h2>

<ol>
  <li><strong>BrowsingHistoryView</strong>: This tool is used to view the web browsing history on a computer. It compiles information from various browsers and presents it in a single interface. This can be crucial in determining what websites were accessed from a particular device, which can provide insights into user behavior or intent.</li>
  <li><strong>FavoritesView</strong>: This software is designed to recover and view the list of bookmarks or “favorites” from various web browsers. Similar to browsing history, this data can offer clues about the user’s interests, intentions, or activities.</li>
  <li><strong>Helix</strong>: Helix is a more comprehensive forensic tool that often comes as a bootable CD. It includes various utilities for system analysis, data recovery, and forensics. Helix can be used for tasks like secure data deletion, network analysis, and memory dumping, making it versatile for different aspects of digital forensics.</li>
  <li><strong>IECacheView</strong>: This tool is specifically for Internet Explorer and allows forensic analysts to view and extract the browser’s web cache. The web cache contains temporary internet files, including web pages, images, and other media the user has accessed. This can be useful for reconstructing a user’s internet activities.</li>
  <li><strong>IECookiesView</strong>: Similar to IECacheView but specifically for cookies in Internet Explorer, this tool allows forensic experts to view and analyze cookies, which can provide information about the websites visited, login sessions, and user preferences.</li>
  <li><strong>MyLastSearch</strong>: This tool is designed to recover the search queries made on a device. It can extract search queries from popular search engines and social media platforms. This information can be vital in understanding the user’s intentions and activities before a specific event or action.</li>
  <li><strong>ProcessExplorer</strong>: This more advanced system utility provides detailed information about which files and directories are opened by specific processes. It helps understand the behavior of running programs and can be used to detect malicious activities, such as hidden processes or unauthorized access to files.</li>
</ol>

<p>In a forensic investigation, these tools are typically used to collect, analyze, and preserve digital evidence from devices like computers, smartphones, or storage media. The evidence gathered can be used in legal contexts, such as criminal investigations, civil litigations, or corporate audits.</p>

<h2 id="methodologies-used-in-forensic-investigations">Methodologies Used in Forensic Investigations</h2>

<ol>
  <li>Computer Forensics Methodology
    <ul>
      <li><strong>Preparation</strong>: Before starting the investigation, investigators prepare by gathering the necessary tools software, and ensuring legal compliance.</li>
      <li><strong>Preservation</strong>: The primary step is to preserve the digital evidence. This involves creating a forensic image of the data storage devices, ensuring the original data remains unaltered.</li>
      <li><strong>Analysis</strong>: In this phase, forensic analysts examine the digital copies of the storage media, using various tools to recover deleted, encrypted, or damaged files and extract relevant data.</li>
      <li><strong>Documentation</strong>: This step involves keeping detailed records of the investigation process, findings, and the chain of custody of the evidence.</li>
      <li><strong>Reporting</strong>: The final step is compiling the findings into a comprehensive report that can be presented in legal proceedings.</li>
    </ul>
  </li>
  <li>Network Forensics Methodology
    <ul>
      <li><strong>Capture</strong>: This involves capturing and monitoring network traffic. This can be achieved by deploying network sniffers or intrusion detection systems.</li>
      <li><strong>Examination</strong>: The captured data is then examined to identify suspicious activities or anomalies indicating unauthorized access or other malicious activities.</li>
      <li><strong>Analysis</strong>: This phase goes deeper into investigating the nature of the network traffic, identifying the traffic sources, and reconstructing any unauthorized activities.</li>
      <li><strong>Correlation</strong>: Investigators may correlate data from various sources to build a comprehensive picture of the incident.</li>
      <li><strong>Reporting</strong>: Like computer forensics, the findings are documented in a detailed report.</li>
    </ul>
  </li>
</ol>

<h2 id="common-forensic-certifications">Common Forensic Certifications</h2>

<ol>
  <li><strong>Certified Computer Examiner (CCE)</strong>: Offered by the International Society of Forensic Computer Examiners, this certification focuses on the methodologies and best practices for computer forensics. It is widely recognized and emphasizes practical, hands-on experience.</li>
  <li><strong>Certified Forensic Computer Examiner (CFCE)</strong>: Provided by the International Association of Computer Investigative Specialists, this certification involves peer review and independent study. It covers various aspects of computer forensics, including legal issues, digital evidence handling, and forensic analysis techniques.</li>
  <li><strong>Certified Information Systems Security Professional (CISSP)</strong>: Though broader in scope, the CISSP certification by (ISC)² covers aspects of digital forensics as part of its comprehensive information security and cybersecurity curriculum. It is highly regarded in various IT security roles, including forensics.</li>
</ol>

<h2 id="evidence-handling-tasks-in-forensic-investigations">Evidence-Handling Tasks in Forensic Investigations</h2>

<p>Evidence-handling tasks in forensic investigations are crucial for maintaining the integrity and admissibility of the evidence. These tasks include:</p>

<ul>
  <li><strong>Collection</strong>: Securely collecting digital evidence from various sources like hard drives, mobile devices, and cloud storage. This must be done carefully to avoid altering or damaging the evidence.</li>
  <li><strong>Preservation</strong>: Ensuring that the collected evidence is preserved in its original form. This often involves making bit-by-bit copies of digital storage devices.</li>
  <li><strong>Documentation</strong>: Maintaining detailed records of how the evidence was collected, handled, and analyzed. This includes documenting the chain of custody, which is a record of everyone who handled the evidence.</li>
  <li><strong>Transportation</strong>: Safely transporting the evidence to the forensic laboratory or storage. This requires secure and tamper-evident containers to prevent unauthorized access or alterations.</li>
  <li><strong>Storage</strong>: Storing the evidence in a secure environment to prevent damage or unauthorized access. This is crucial for maintaining the validity of the evidence throughout the investigation.</li>
  <li><strong>Analysis</strong>: Forensic analysts examine the evidence using various techniques and tools, ensuring that the analysis does not alter the original data.</li>
  <li><strong>Reporting</strong>: Preparing detailed reports that summarize the findings, methodologies used, and the evidence’s relevance in the investigation context.</li>
</ul>

<p>These tasks are essential to ensure the evidence remains reliable and can be used effectively in legal proceedings or investigative processes.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The in-depth exploration of various forensic tools and methodologies in my Digital Forensics class provides a comprehensive understanding of these tools’ critical role in solving digital crimes. From BrowsingHistoryView to ProcessExplorer, each tool offers unique capabilities in uncovering hidden or deleted data, analyzing user behavior, and piecing together digital interactions. The methodologies, ranging from computer to network forensics, highlight the systematic and meticulous approach required in this field to ensure the integrity and admissibility of evidence.</p>

<p>The lab experience also emphasized the importance of proper evidence handling, from collection to reporting, underscoring the meticulous nature of forensic investigations. It became evident that every step, whether preserving the digital evidence or documenting the chain of custody, is vital to maintaining the evidence’s reliability and legal standing.</p>

<p>Furthermore, learning about the various forensic certifications reinforced the need for continuous learning and skill development in this rapidly evolving field. Certifications like CCE, CFCE, and CISSP validate expertise and ensure that professionals stay updated with the latest techniques and legal requirements.</p>

<p>Overall, this lab experience was not just about learning the use of tools; it was an immersive journey into the complexities and challenges of digital forensics. It sheds light on the importance of digital evidence in modern investigations and the rigorous processes involved in extracting and preserving this evidence. This knowledge is invaluable for anyone aspiring to a career in digital forensics, offering a solid foundation for facing real-world challenges in this dynamic and critical field.</p>

<h2 id="source">Source</h2>

<p>Easttom, C. (2017). System Forensics, Investigation, and Response (3rd ed.). Jones &amp; Bartlett Learning.</p>]]></content><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">How To Set Up Kali Linux On Macbook Pro, M1 Using VMWARE</title><link href="http://localhost:4000/jekyll/update/2023/12/09/how-to-set-up-kali-linux-on-macbook-pro-m1-using-vmware.html" rel="alternate" type="text/html" title="How To Set Up Kali Linux On Macbook Pro, M1 Using VMWARE" /><published>2023-12-09T00:00:00-10:00</published><updated>2023-12-09T00:00:00-10:00</updated><id>http://localhost:4000/jekyll/update/2023/12/09/how-to-set-up-kali-linux-on-macbook-pro-m1-using-vmware</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/12/09/how-to-set-up-kali-linux-on-macbook-pro-m1-using-vmware.html"><![CDATA[<h2 id="project-description">Project Description</h2>

<p><strong>Objective</strong>: This blog post aims to provide a comprehensive guide on how to install Kali Linux, a leading Linux distribution for security and penetration testing, on a MacBook Pro equipped with the Apple M1 chip using VMWare. The guide is tailored for users who wish to utilize the powerful features of Kali Linux on Apple’s innovative M1 hardware, overcoming compatibility challenges.</p>

<p><strong>Target Audience</strong>: The guide is designed for cybersecurity professionals, IT students, and tech enthusiasts who have a basic understanding of operating systems and virtualization. It’s particularly beneficial for those who use MacBook Pro M1 and want to leverage Kali Linux for security assessments, ethical hacking, or educational purposes.</p>

<h2 id="background-linux-on-apples-m1-chip">Background: Linux on Apple’s M1 Chip</h2>

<p><strong>The Advent of Apple Silicon</strong>:</p>

<p>In late 2020, Apple introduced its M1 chip, a significant leap in ARM-based processors, marking a departure from Intel CPUs. The M1 chip promised improved performance and energy efficiency, setting a new standard for personal computing.</p>

<p><strong>Initial Compatibility Challenges</strong>:</p>

<p>The shift to the M1 chip, however, presented notable challenges for Linux distributions, including Kali Linux. The primary hurdle was the ARM architecture, vastly different from the x86 architecture used by Intel and AMD processors, which most Linux distributions were primarily designed for.
This architectural change necessitated significant modifications in the Linux kernel and other software components to ensure compatibility with the M1’s hardware.</p>

<p><strong>Progress and Development</strong>:</p>

<p>The Linux community, known for its resilience and adaptability, began working on solutions. Efforts were directed towards developing compatible Linux kernels and ensuring software compatibility.
Over time, virtualization emerged as a viable solution, with tools like VMWare updating their software to support ARM architecture, thereby enabling the running of ARM-compatible Linux distributions on M1 MacBooks.</p>

<p><strong>State of Linux on M1 Today</strong>:</p>

<p>As of now, the Linux experience on M1 MacBooks has improved substantially, with many distributions, including Kali Linux, offering versions that work well with ARM architecture. However, the process can still involve specific workarounds and configurations, especially when using virtualization platforms like VMWare.</p>

<p><strong>Kali Linux and M1: A Synergy of Security and Performance</strong>:</p>

<p>Kali Linux, being a top choice for security professionals, offers a unique advantage when run on the powerful and efficient M1 chip. This combination provides an ideal platform for security testing and research, combining the robust toolset of Kali Linux with the cutting-edge performance of Apple’s M1 hardware.</p>

<p><strong>The Guide’s Purpose</strong>:</p>

<p>The upcoming guide aims to simplify this process, offering step-by-step instructions and insights to successfully install and run Kali Linux on a MacBook Pro M1 using VMWare, bridging the gap between advanced security tools and the latest in hardware innovation.</p>

<h2 id="installing-kali-linux-on-macbook-pro-m1-using-vmware">Installing Kali Linux on MacBook Pro M1 Using VMWare</h2>

<p><strong>Prerequisites</strong>:</p>

<ol>
  <li>MacBook Pro with M1 Chip: Ensure your MacBook Pro is equipped with the M1 chip.</li>
  <li>VMWare Fusion for Mac: As of my last update in April 2023, VMWare Fusion offers support for M1 Macs. Download the latest version compatible with ARM architecture from the VMWare website.</li>
  <li>Kali Linux ARM Image: Download the ARM-compatible version of Kali Linux from the official Kali Linux website.</li>
  <li>Sufficient Storage Space: Ensure you have enough space on your MacBook Pro for a virtual machine (VM) — at least 20GB is recommended.</li>
  <li>Backup Your Data: Always back up your data before proceeding with such installations.</li>
</ol>

<p><strong>Steps</strong>:</p>
<ol>
  <li><strong>Install VMWare Fusion</strong>:
    <ul>
      <li>Install VMWare Fusion on your MacBook Pro following the instructions provided on the VMWare website.</li>
    </ul>
  </li>
  <li><strong>Setting Up a New Virtual Machine</strong>:
    <ul>
      <li>Open VMWare Fusion.</li>
      <li>Choose to create a new virtual machine.
Drag and drop the Kali Linux ARM image file onto the VMWare Fusion window or use the ‘Install from disc or image’ option.</li>
    </ul>
  </li>
  <li><strong>Customize Your Virtual Machine</strong>:
    <ul>
      <li><strong>Memory and Processors</strong>: Allocate memory (RAM) and CPU cores. It’s recommended to allocate at least 2GB of RAM and 2 CPU cores for smooth operation.</li>
      <li><strong>Hard Disk</strong>: Ensure the VM has enough space. A minimum of 20GB is recommended for Kali Linux.</li>
      <li><strong>Network Adapter</strong>: Choose the network settings suitable for your requirements, either NAT or Bridged networking.</li>
    </ul>
  </li>
  <li><strong>Begin the Installation Process</strong>:
    <ul>
      <li>Follow the on-screen instructions to start the installation of Kali Linux.</li>
      <li>Select the appropriate options during the setup, including language, location, keyboard layout, and disk partitioning.</li>
      <li>When prompted, set the root password and create a new user if required.</li>
    </ul>
  </li>
  <li><strong>Finalizing Installation</strong>:
    <ul>
      <li>Allow the installation to complete. This process may take some time.</li>
      <li>Once the installation is finished, VMWare Fusion should automatically boot into Kali Linux.
If not, restart the VM and boot into the newly installed Kali Linux.</li>
    </ul>
  </li>
  <li><strong>Installing VMWare Tools (Optional, but Recommended)</strong>:
    <ul>
      <li>Once Kali Linux is up and running, install VMWare Tools for better performance and usability.</li>
      <li>Open the terminal in Kali Linux and run the command to install VMWare Tools <code class="language-plaintext highlighter-rouge">sudo apt-get install open-vm-tools-desktop -y</code>.</li>
      <li>Restart the VM after the installation.</li>
    </ul>
  </li>
  <li><strong>Update and Upgrade Kali Linux</strong>:
    <ul>
      <li>It’s important to update Kali Linux to the latest version.</li>
      <li>Open the terminal and run <code class="language-plaintext highlighter-rouge">sudo apt-get update</code> and <code class="language-plaintext highlighter-rouge">sudo apt-get upgrade</code>.</li>
    </ul>
  </li>
  <li><strong>Configuring Kali Linux</strong>:
    <ul>
      <li>Once updated, you can configure Kali Linux as per your requirements.</li>
      <li>Install additional security tools and software as needed.</li>
    </ul>
  </li>
</ol>

<h2 id="post-installation">Post-Installation:</h2>

<p><strong>Test Network Connectivity</strong>: Check if the internet is working correctly in the Kali Linux VM.</p>

<p><strong>Create Snapshots</strong>: Use VMWare Fusion to create snapshots of your VM. This allows you to revert to a known state if something goes wrong later.</p>

<p><strong>Explore Kali Linux</strong>: Familiarize yourself with the Kali Linux environment and its tools.</p>

<h2 id="conclusion">Conclusion:</h2>

<p>Installing Kali Linux on a MacBook Pro M1 using VMWare Fusion is a straightforward process, but it requires careful attention to detail. This setup allows you to leverage the powerful capabilities of Kali Linux for security testing and ethical hacking while taking advantage of the performance benefits of the M1 chip. Enjoy exploring the vast array of tools and features that Kali Linux offers!</p>

<h2 id="sources">Sources</h2>

<p><strong>Kali Linux Official Website:</strong></p>

<p>For downloading the ARM-compatible version of Kali Linux.</p>

<p>Website: <a href="https://www.kali.org/get-kali/#kali-arm">Kali Linux Downloads</a></p>

<p><strong>VMware Fusion:</strong></p>

<p>To get the latest version of VMware Fusion compatible with Apple M1 Macs.</p>

<p>Website: <a href="https://www.vmware.com/products/fusion.html">VMware Fusion</a></p>

<p><strong>VMware Fusion Documentation:</strong></p>

<p>For detailed instructions and support related to VMware Fusion.</p>

<p>Documentation: <a href="https://docs.vmware.com/en/VMware-Fusion/index.html">VMware Fusion Documentation</a></p>

<p><strong>Apple M1 Chip Information:</strong></p>

<p>To understand more about the Apple M1 chip’s specifications and capabilities.</p>

<p>Apple M1 Info: <a href="https://www.apple.com/mac/m1/">Apple M1 Chip</a></p>

<p><strong>Kali Linux Documentation:</strong></p>

<p>For specific guidance on using Kali Linux, including installation and configuration.</p>

<p>Documentation: <a href="https://www.kali.org/docs/">Kali Linux Documentation</a></p>

<p><strong>Kali Linux Forums and Community:</strong></p>

<p>To seek help, share experiences, and troubleshoot issues related to Kali Linux.</p>

<p>Community Forum: <a href="https://forums.kali.org/">Kali Linux Forums</a></p>

<p><strong>Apple Support:</strong>
For assistance with macOS and hardware-specific queries.</p>

<p>Support: <a href="https://support.apple.com/">Apple Support</a></p>]]></content><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Project Description]]></summary></entry><entry><title type="html">Creating a Vulnerability Assessment Tool (VAT) with Python: Part I</title><link href="http://localhost:4000/jekyll/update/2023/11/16/creating-a-vulnerability-assessment-tool-part-1.html" rel="alternate" type="text/html" title="Creating a Vulnerability Assessment Tool (VAT) with Python: Part I" /><published>2023-11-16T00:00:00-10:00</published><updated>2023-11-16T00:00:00-10:00</updated><id>http://localhost:4000/jekyll/update/2023/11/16/creating-a-vulnerability-assessment-tool-part-1</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/11/16/creating-a-vulnerability-assessment-tool-part-1.html"><![CDATA[<h2 id="overview">Overview</h2>

<p>The development focused on creating a Python-based vulnerability assessment tool, specifically targeting XSS (Cross-Site Scripting) vulnerabilities. The tool is designed to be run from the command line and allows users to scan specified URLs for potential vulnerabilities. It features modular code for easy maintenance and scalability.</p>

<h2 id="project-structure">Project Structure</h2>

<p>CLI Parsing (<code class="language-plaintext highlighter-rouge">cli.py</code>)</p>
<ul>
  <li>Responsible for parsing command-line arguments.</li>
  <li>Arguments include the target URL, chosen plugin (defaulting to XSS), and an option to disable SSL verification.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># cli.py - Command line interface for VAT
</span>
<span class="kn">import</span> <span class="nn">argparse</span>

<span class="k">def</span> <span class="nf">parse_arguments</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">"Vulnerability Assessment Tool"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"url"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"Target URL to scan"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--plugin"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">"xss"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="s">"xss"</span><span class="p">],</span> <span class="n">help</span><span class="o">=</span><span class="s">"Vulnerability plugin to use. Default is XSS."</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"--no-verify"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">"store_true"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"Disable SSL verification"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span>
</code></pre></div></div>

<p>Request Handling (<code class="language-plaintext highlighter-rouge">requests_handler.py</code>)</p>
<ul>
  <li>Manages HTTPS/S requests to the target URL</li>
  <li>Handles SSL verification and related errors, providing an option to proceed without SSL verification upon user confirmation.</li>
  <li>Detailed SSL error messages are logged to a file for troubleshooting while presenting simplified messages to the user.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># requests_handler.py
</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">requests.exceptions</span> <span class="kn">import</span> <span class="n">SSLError</span>
<span class="kn">import</span> <span class="nn">logging</span>

<span class="c1"># Basic configuration for logging
</span><span class="n">logging</span><span class="p">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="s">'error_log.txt'</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">ERROR</span><span class="p">,</span>
                    <span class="nb">format</span><span class="o">=</span><span class="s">'%(asctime)s:%(levelname)s:%(message)s'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">make_request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">payload</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">verify_ssl</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">payload</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">payload</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="n">verify_ssl</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="n">verify_ssl</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">,</span> <span class="bp">True</span>
    <span class="k">except</span> <span class="n">SSLError</span> <span class="k">as</span> <span class="n">ssl_error</span><span class="p">:</span>
        <span class="n">logging</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"SSL Certificate Error encountered for </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">ssl_error</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"SSL Certificate Error: The site's security certificate is not trusted."</span><span class="p">)</span>
        <span class="n">choice</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Proceed without SSL verification? (yes/no): "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">choice</span> <span class="o">==</span> <span class="s">'yes'</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Proceeding without SSL verification..."</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">payload</span><span class="p">:</span>
                    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">payload</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">response</span><span class="p">,</span> <span class="bp">True</span>
            <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">RequestException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Error: Failed to make the request without SSL verification."</span><span class="p">)</span>
                <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">False</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">False</span>
    <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">RequestException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: Failed to make the request. Details: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">False</span>
</code></pre></div></div>

<p>XSS Plugin (<code class="language-plaintext highlighter-rouge">xss.py</code> in <code class="language-plaintext highlighter-rouge">plugins</code> directory)</p>
<ul>
  <li>Contains the <code class="language-plaintext highlighter-rouge">check_xss</code> function that sends a payload to the target URL to test for reflected XSS vulnerabilities.</li>
  <li>Utilizes the <code class="language-plaintext highlighter-rouge">make_request</code> function from <code class="language-plaintext highlighter-rouge">request_handler.py</code>.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># xss.py
</span>
<span class="kn">from</span> <span class="nn">..requests_handler</span> <span class="kn">import</span> <span class="n">make_request</span>


<span class="k">def</span> <span class="nf">check_xss</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">verify_ssl</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="c1"># A basic payload
</span>    <span class="n">payload</span> <span class="o">=</span> <span class="s">"&lt;script&gt;alert('xss')&lt;/script&gt;"</span>
    <span class="n">response</span><span class="p">,</span> <span class="n">request_made</span> <span class="o">=</span> <span class="n">make_request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="p">{</span><span class="s">"q"</span><span class="p">:</span> <span class="n">payload</span><span class="p">},</span> <span class="n">verify_ssl</span><span class="o">=</span><span class="n">verify_ssl</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">response</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">payload</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">request_made</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="n">request_made</span>
</code></pre></div></div>

<p>Main Script (<code class="language-plaintext highlighter-rouge">vat.py</code>)</p>
<ul>
  <li>Integrates all components.</li>
  <li>Orchestrates the workflow based on user input from the CLI.</li>
  <li>Handles final output messages to the user based on the scan results and any encountered issues.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vat.py
</span>
<span class="kn">from</span> <span class="nn">src.vat.cli</span> <span class="kn">import</span> <span class="n">parse_arguments</span>
<span class="kn">from</span> <span class="nn">src.vat.requests_handler</span> <span class="kn">import</span> <span class="n">make_request</span>
<span class="kn">from</span> <span class="nn">src.vat.plugins.xss</span> <span class="kn">import</span> <span class="n">check_xss</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># Parse CLI arguments
</span>    <span class="n">args</span> <span class="o">=</span> <span class="n">parse_arguments</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Scanning </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s"> using the </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">plugin</span><span class="si">}</span><span class="s"> plugin..."</span><span class="p">)</span>

    <span class="c1"># Handle SSL verification based on CLI argument
</span>    <span class="n">verify_ssl</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">args</span><span class="p">.</span><span class="n">no_verify</span>

    <span class="c1"># Check for vulnerabilities based on the chosen plugin
</span>    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">plugin</span> <span class="o">==</span> <span class="s">"xss"</span><span class="p">:</span>
        <span class="n">vulnerable</span><span class="p">,</span> <span class="n">performed_check</span> <span class="o">=</span> <span class="n">check_xss</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">url</span><span class="p">,</span> <span class="n">verify_ssl</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">performed_check</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">vulnerable</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s"> is vulnerable to XSS!"</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s"> is not vulnerable to XSS."</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Error message is printed by the requests_handler module
</span>            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Scanning of </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="s"> was aborted due to SSL verification failure."</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="key-features-and-functionality">Key Features and Functionality</h2>

<ol>
  <li>SSL Verification
    <ul>
      <li>The tool rigorously handles SSL certificate verification.</li>
      <li>In case of SSL errors, users are prompted to choose whether to proceed without SSL verification.</li>
      <li>Detailed SSL errors are logged to error_log.txt, keeping user interaction clean and non-technical.</li>
    </ul>
  </li>
  <li>XSS Vulnerability Checking
    <ul>
      <li>The tool checks for a basic form of reflected XSS.</li>
      <li>Sends a test payload and checks if it is reflected in the response from the target URL.</li>
    </ul>
  </li>
  <li>User-Friendly Interface
    <ul>
      <li>Despite the complexity of the operations, the tool maintains a user-friendly command-line interface.</li>
      <li>Clear and concise messages are provided to the user, avoiding technical jargon and redundancy.</li>
    </ul>
  </li>
  <li>Modular and Scalable Design:
    <ul>
      <li>Code is organized into distinct modules for specific functionalities, promoting maintainability and scalability.</li>
      <li>The structure allows for easy addition of new features or plugins in the future.</li>
    </ul>
  </li>
</ol>

<h2 id="testing-and-validation">Testing and Validation</h2>

<p>The tool has been tested with various scenarios, including:</p>
<ul>
  <li>URLs with valid SSL certificates.</li>
  <li>URLs with SSL certificate issues (e.g., https://expired.badssl.com/).</li>
  <li>With and without the –no-verify flag to test SSL verification handling.</li>
</ul>

<p>In all scenarios, the tool behaved as expected, providing appropriate user prompts and logging detailed errors where necessary.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Throughout the development of this vulnerability assessment tool, I have gained significant insights and accomplished several key objectives. This project not only enhanced my technical skills in Python programming but also deepened my understanding of software design principles and security considerations in application development.</p>

<h2 id="key-learnings-and-accomplishments">Key Learnings and Accomplishments:</h2>

<ol>
  <li>
    <p><strong>Modular Programming:</strong> By structuring the project into separate modules like cli.py, requests_handler.py, and xss.py, I learned the importance of modular design. This approach not only made the code more organized and maintainable but also simplified debugging and testing processes.</p>
  </li>
  <li>
    <p><strong>Handling User Interactions:</strong> Implementing a user-friendly command-line interface taught me how to balance technical functionality with user experience. Crafting clear and non-technical messages, especially when handling SSL verification, was crucial in making the tool accessible to users without deep technical backgrounds.</p>
  </li>
  <li>
    <p><strong>Error Handling and Logging:</strong> Dealing with SSL errors and implementing logging mechanisms was a significant learning curve. I learned to effectively catch and log errors while keeping the user interface clean. This aspect of the project underscored the importance of robust error handling in building reliable software.</p>
  </li>
  <li>
    <p><strong>Security Practices:</strong> Working on a tool focused on detecting XSS vulnerabilities offered practical insights into web security vulnerabilities. It heightened my awareness of the security aspects crucial in software development and the importance of proactive testing for vulnerabilities.</p>
  </li>
</ol>

<h2 id="future-scalability-and-enhancements">Future Scalability and Enhancements</h2>

<p>Looking ahead, there are several avenues for enhancing and scaling this tool:</p>

<ol>
  <li>
    <p><strong>Expanding Vulnerability Checks:</strong>  The current focus is on XSS vulnerabilities. I plan to extend the tool’s capabilities to include other common vulnerabilities like SQL injection, CSRF, and more, turning it into a more comprehensive security assessment tool.</p>
  </li>
  <li>
    <p><strong>Improved Logging and Reporting:</strong>  Enhancing the logging system to include more detailed reports, potentially with an option to generate summary reports, would make the tool more useful for in-depth security analysis.</p>
  </li>
  <li>
    <p><strong>User Interface Enhancements:</strong>  Incorporating more interactive elements into the CLI, such as progress indicators and more detailed help messages, could further improve the user experience.</p>
  </li>
  <li>
    <p><strong>Automated Testing and CI Integration:</strong>  Implementing automated tests and integrating the tool into a continuous integration (CI) pipeline would ensure its reliability and effectiveness in real-world scenarios.</p>
  </li>
  <li>
    <p><strong>Customization and Configurability:</strong>  Adding options for users to customize payloads and scan parameters would make the tool more versatile and adaptable to different testing environments.</p>
  </li>
</ol>

<p>Finally, this project has been an immensely enriching experience, combining practical software development with the intricacies of web security. The skills and knowledge gained lay a strong foundation for future projects, especially in the realms of cybersecurity and software development. I look forward to continuing to enhance the tool, adding new features, and applying these learnings to future endeavors.</p>]]></content><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Overview The development focused on creating a Python-based vulnerability assessment tool, specifically targeting XSS (Cross-Site Scripting) vulnerabilities. The tool is designed to be run from the command line and allows users to scan specified URLs for potential vulnerabilities. It features modular code for easy maintenance and scalability. Project Structure CLI Parsing (cli.py) Responsible for parsing command-line arguments. Arguments include the target URL, chosen plugin (defaulting to XSS), and an option to disable SSL verification. # cli.py - Command line interface for VAT import argparse def parse_arguments(): parser = argparse.ArgumentParser(description="Vulnerability Assessment Tool") parser.add_argument("url", help="Target URL to scan") parser.add_argument("--plugin", default="xss", choices=["xss"], help="Vulnerability plugin to use. Default is XSS.") parser.add_argument("--no-verify", action="store_true", help="Disable SSL verification") return parser.parse_args() Request Handling (requests_handler.py) Manages HTTPS/S requests to the target URL Handles SSL verification and related errors, providing an option to proceed without SSL verification upon user confirmation. Detailed SSL error messages are logged to a file for troubleshooting while presenting simplified messages to the user. # requests_handler.py import requests from requests.exceptions import SSLError import logging # Basic configuration for logging logging.basicConfig(filename='error_log.txt', level=logging.ERROR, format='%(asctime)s:%(levelname)s:%(message)s') def make_request(url, payload=None, verify_ssl=True): try: if payload: response = requests.get(url, params=payload, verify=verify_ssl) else: response = requests.get(url, verify=verify_ssl) return response, True except SSLError as ssl_error: logging.error(f"SSL Certificate Error encountered for {url}: {ssl_error}") print("SSL Certificate Error: The site's security certificate is not trusted.") choice = input("Proceed without SSL verification? (yes/no): ").lower() if choice == 'yes': print("Proceeding without SSL verification...") try: if payload: response = requests.get(url, params=payload, verify=False) else: response = requests.get(url, verify=False) return response, True except requests.RequestException as e: print("Error: Failed to make the request without SSL verification.") return None, False else: return None, False except requests.RequestException as e: print(f"Error: Failed to make the request. Details: {e}") return None, False XSS Plugin (xss.py in plugins directory) Contains the check_xss function that sends a payload to the target URL to test for reflected XSS vulnerabilities. Utilizes the make_request function from request_handler.py. # xss.py from ..requests_handler import make_request def check_xss(url, verify_ssl=True): # A basic payload payload = "&lt;script&gt;alert('xss')&lt;/script&gt;" response, request_made = make_request(url, {"q": payload}, verify_ssl=verify_ssl) if response: return (payload in response.text, request_made) else: return False, request_made Main Script (vat.py) Integrates all components. Orchestrates the workflow based on user input from the CLI. Handles final output messages to the user based on the scan results and any encountered issues. # vat.py from src.vat.cli import parse_arguments from src.vat.requests_handler import make_request from src.vat.plugins.xss import check_xss def main(): # Parse CLI arguments args = parse_arguments() print(f"Scanning {args.url} using the {args.plugin} plugin...") # Handle SSL verification based on CLI argument verify_ssl = not args.no_verify # Check for vulnerabilities based on the chosen plugin if args.plugin == "xss": vulnerable, performed_check = check_xss(args.url, verify_ssl) if performed_check: if vulnerable: print(f"{args.url} is vulnerable to XSS!") else: print(f"{args.url} is not vulnerable to XSS.") else: # Error message is printed by the requests_handler module print(f"Scanning of {args.url} was aborted due to SSL verification failure.") if __name__ == "__main__": main() Key Features and Functionality SSL Verification The tool rigorously handles SSL certificate verification. In case of SSL errors, users are prompted to choose whether to proceed without SSL verification. Detailed SSL errors are logged to error_log.txt, keeping user interaction clean and non-technical. XSS Vulnerability Checking The tool checks for a basic form of reflected XSS. Sends a test payload and checks if it is reflected in the response from the target URL. User-Friendly Interface Despite the complexity of the operations, the tool maintains a user-friendly command-line interface. Clear and concise messages are provided to the user, avoiding technical jargon and redundancy. Modular and Scalable Design: Code is organized into distinct modules for specific functionalities, promoting maintainability and scalability. The structure allows for easy addition of new features or plugins in the future. Testing and Validation The tool has been tested with various scenarios, including: URLs with valid SSL certificates. URLs with SSL certificate issues (e.g., https://expired.badssl.com/). With and without the –no-verify flag to test SSL verification handling. In all scenarios, the tool behaved as expected, providing appropriate user prompts and logging detailed errors where necessary. Conclusion Throughout the development of this vulnerability assessment tool, I have gained significant insights and accomplished several key objectives. This project not only enhanced my technical skills in Python programming but also deepened my understanding of software design principles and security considerations in application development. Key Learnings and Accomplishments: Modular Programming: By structuring the project into separate modules like cli.py, requests_handler.py, and xss.py, I learned the importance of modular design. This approach not only made the code more organized and maintainable but also simplified debugging and testing processes. Handling User Interactions: Implementing a user-friendly command-line interface taught me how to balance technical functionality with user experience. Crafting clear and non-technical messages, especially when handling SSL verification, was crucial in making the tool accessible to users without deep technical backgrounds. Error Handling and Logging: Dealing with SSL errors and implementing logging mechanisms was a significant learning curve. I learned to effectively catch and log errors while keeping the user interface clean. This aspect of the project underscored the importance of robust error handling in building reliable software. Security Practices: Working on a tool focused on detecting XSS vulnerabilities offered practical insights into web security vulnerabilities. It heightened my awareness of the security aspects crucial in software development and the importance of proactive testing for vulnerabilities. Future Scalability and Enhancements Looking ahead, there are several avenues for enhancing and scaling this tool: Expanding Vulnerability Checks: The current focus is on XSS vulnerabilities. I plan to extend the tool’s capabilities to include other common vulnerabilities like SQL injection, CSRF, and more, turning it into a more comprehensive security assessment tool. Improved Logging and Reporting: Enhancing the logging system to include more detailed reports, potentially with an option to generate summary reports, would make the tool more useful for in-depth security analysis. User Interface Enhancements: Incorporating more interactive elements into the CLI, such as progress indicators and more detailed help messages, could further improve the user experience. Automated Testing and CI Integration: Implementing automated tests and integrating the tool into a continuous integration (CI) pipeline would ensure its reliability and effectiveness in real-world scenarios. Customization and Configurability: Adding options for users to customize payloads and scan parameters would make the tool more versatile and adaptable to different testing environments. Finally, this project has been an immensely enriching experience, combining practical software development with the intricacies of web security. The skills and knowledge gained lay a strong foundation for future projects, especially in the realms of cybersecurity and software development. I look forward to continuing to enhance the tool, adding new features, and applying these learnings to future endeavors.]]></summary></entry><entry><title type="html">Update A File Through Python Algorithm</title><link href="http://localhost:4000/jekyll/update/2023/11/03/update-a-file-through-python-algorithm.html" rel="alternate" type="text/html" title="Update A File Through Python Algorithm" /><published>2023-11-03T00:00:00-10:00</published><updated>2023-11-03T00:00:00-10:00</updated><id>http://localhost:4000/jekyll/update/2023/11/03/update-a-file-through-python-algorithm</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/11/03/update-a-file-through-python-algorithm.html"><![CDATA[<h2 id="project-description">Project Description</h2>

<p>At my organization, access to restricted content is controlled with an allow list of IP addresses. The <code class="language-plaintext highlighter-rouge">allow_list.txt</code> file identifies these IP addresses. A separate remove list identifies IP addresses that should no longer have access to this content. I created an algorithm to automate updating the <code class="language-plaintext highlighter-rouge">allow_list.txt</code> file and remove these IP addresses that should no longer have access.</p>

<h2 id="open-the-file-that-contains-the-allow-list">Open The File That Contains The Allow List</h2>

<p>For the first part of the algorithm, I opened the <code class="language-plaintext highlighter-rouge">allow_list.txt</code> file. First, I assigned this file name as a string to the <code class="language-plaintext highlighter-rouge">import_file</code> variable:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># Assign `import_file` to the name of the file
</span>
 <span class="n">import_file</span> <span class="o">=</span> <span class="s">"allow_list.txt"</span>
</code></pre></div></div>
<p>Then, I used a <code class="language-plaintext highlighter-rouge">with</code> statement to open the file:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Build `with` statement to read the name in the initial contents of the file
</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">import_file</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
</code></pre></div></div>

<p>In my algorithm, the <code class="language-plaintext highlighter-rouge">with</code> statement is used with the <code class="language-plaintext highlighter-rouge">.open()</code> function in read mode to open the allow list file for the purpose of reading it. The purpose of opening the file is to allow me to access the IP addresses stored in the allow list file. The <code class="language-plaintext highlighter-rouge">with</code> keyword will help manage the resources by closing the file after exiting the <code class="language-plaintext highlighter-rouge">with</code> statement. In the code <code class="language-plaintext highlighter-rouge">with open(import_file, "r") as file:</code>, the <code class="language-plaintext highlighter-rouge">open()</code> function has two parameters. The first identifies the file to import, and then the second indicates what I want to do with the file. In this case, <code class="language-plaintext highlighter-rouge">"r"</code> indicates that I want to read it. The code also uses the <code class="language-plaintext highlighter-rouge">as</code> keyword to assign a variable named <code class="language-plaintext highlighter-rouge">file</code>; <code class="language-plaintext highlighter-rouge">file</code> stores the output of the <code class="language-plaintext highlighter-rouge">.open()</code> function while I work within the <code class="language-plaintext highlighter-rouge">with</code> statement.</p>

<h2 id="read-the-file-contents">Read The File Contents</h2>

<p>In order to read the file contents, I used the <code class="language-plaintext highlighter-rouge">.read()</code> method to convert it into the string.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">import_file</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>

    <span class="c1"># Use `.read()` to read the imported file and store it in a variable named `ip_addresses`
</span>
    <span class="n">ip_addresses</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
</code></pre></div></div>

<p>When using an <code class="language-plaintext highlighter-rouge">.open()</code> function that includes the argument <code class="language-plaintext highlighter-rouge">"r"</code> for “read,” I can call the <code class="language-plaintext highlighter-rouge">.read()</code> function in the body of the <code class="language-plaintext highlighter-rouge">with</code> statement. The .<code class="language-plaintext highlighter-rouge">read()</code> method converts the file into a string and allows me to read it. I applied the <code class="language-plaintext highlighter-rouge">.read()</code> method to the <code class="language-plaintext highlighter-rouge">file</code> variable identified in the <code class="language-plaintext highlighter-rouge">with</code> statement. Then, I assigned the string output of this method to the variable <code class="language-plaintext highlighter-rouge">ip_addresses</code>.</p>

<p>In summary, this code reads the contents of the <code class="language-plaintext highlighter-rouge">"allow_list.txt"</code> file into a string format that allows me to later use the string to organize and extract data in my Python program.</p>

<h2 id="convert-the-string-into-a-list">Convert The String Into A List</h2>

<p>In order to remove individual IP addresses from the allow list, I needed it to be in list format. Therefore, I next used the <code class="language-plaintext highlighter-rouge">.split()</code> method to convert the <code class="language-plaintext highlighter-rouge">ip_addresses</code> string into a list:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use `.split()` to convert `ip_addresses` from a string to a list
</span>
<span class="n">ip_addresses</span> <span class="o">=</span> <span class="n">ip_addresses</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">.split()</code> function is called by appending it to a string variable. It works by converting the contents of a string to a list. The purpose of splitting <code class="language-plaintext highlighter-rouge">ip_addresses</code> into a list is to make it easier to remove IP addresses from the allow list. By default, the <code class="language-plaintext highlighter-rouge">.split()</code> function splits the text by whitespace into list elements. In this algorithm, the <code class="language-plaintext highlighter-rouge">.split()</code> function takes the data stored in the variable <code class="language-plaintext highlighter-rouge">ip_addresses</code>, which is a string of IP addresses that are each separated by a whitespace, and it converts this string into a list of IP addresses. To store this list, I reassigned it back to the variable <code class="language-plaintext highlighter-rouge">ip_addresses</code>.</p>

<h2 id="iterate-through-the-remove-list">Iterate Through The Remove List</h2>

<p>A key part of my algorithm involves iterating through the IP addresses that are elements in the <code class="language-plaintext highlighter-rouge">remove_list</code>. To do this, I incorporated a <code class="language-plaintext highlighter-rouge">for</code> loop:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Build iterative statement
# Name loop variable `element`
# Loop through `remove_list`
</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">remove_list</span><span class="p">:</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">for</code> loop in Python repeats code for a specified sequence. The overall purpose of the <code class="language-plaintext highlighter-rouge">for</code> loop in a Python algorithm like this is to apply specific code statements to all elements in a sequence. The <code class="language-plaintext highlighter-rouge">for</code> keyword starts the <code class="language-plaintext highlighter-rouge">for</code> loop. It is followed by the loop variable <code class="language-plaintext highlighter-rouge">element</code> and the keyword <code class="language-plaintext highlighter-rouge">in</code>. The keyword <code class="language-plaintext highlighter-rouge">in</code> indicates to iterate through the sequence <code class="language-plaintext highlighter-rouge">ip_addresses</code> and assign each value to the loop variable <code class="language-plaintext highlighter-rouge">element</code>.</p>

<h2 id="remove-ip-addresses-that-are-on-the-remove-list">Remove IP Addresses That Are On The Remove List</h2>

<p>My algorithm requires removing any IP address from the allow list, <code class="language-plaintext highlighter-rouge">ip_addresses</code>, that is also contained in <code class="language-plaintext highlighter-rouge">remove_list</code>.  Because there were not any duplicates in <code class="language-plaintext highlighter-rouge">ip_addresses</code>, I was able to use the following code to do this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">remove_list</span><span class="p">:</span>

    <span class="c1"># Create conditional statement to evaluate if `element` is in `ip_addresses`
</span>
        <span class="k">if</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">ip_addresses</span><span class="p">:</span>
           <span class="c1"># use the `.remove()` method to remove
</span>           <span class="c1"># elements from `ip_addresses`
</span>
               <span class="n">ip_addresses</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</code></pre></div></div>

<p>First, within my <code class="language-plaintext highlighter-rouge">for</code> loop, I created a conditional that evaluated whether or not the loop variable <code class="language-plaintext highlighter-rouge">element</code> was found in the <code class="language-plaintext highlighter-rouge">ip_addresses</code> list. I did this because applying <code class="language-plaintext highlighter-rouge">.remove()</code> to elements that were not found in <code class="language-plaintext highlighter-rouge">ip_addresses</code> would result in an error.</p>

<p>Then, within that conditional, I applied <code class="language-plaintext highlighter-rouge">.remove()</code> to <code class="language-plaintext highlighter-rouge">ip_addresses</code>. I passed in the loop variable <code class="language-plaintext highlighter-rouge">element</code> as the argument so that each IP address that was in the <code class="language-plaintext highlighter-rouge">remove_list</code> would be removed from <code class="language-plaintext highlighter-rouge">ip_addresses</code>.</p>

<h2 id="update-the-file-with-the-revised-list-of-ip-addresses">Update The File With The Revised List Of IP Addresses</h2>

<p>As a final step in my algorithm, I needed to update the allow list file with the revised list of IP addresses. To do so, I first needed to convert the list back into a string. I used the <code class="language-plaintext highlighter-rouge">.join()</code> method for this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Convert `ip_addresses` back to a string so that it can be written into the text file
</span>
<span class="n">ip_addresses</span> <span class="o">=</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">ip_addresses</span><span class="p">)</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">.join()</code> method combines all items in an iterable into a string. The <code class="language-plaintext highlighter-rouge">.join()</code> method is applied to a string containing characters that will separate the elements in the iterable once joined into a string. In this algorithm, I used the <code class="language-plaintext highlighter-rouge">.join()</code> method to create a string from the list <code class="language-plaintext highlighter-rouge">ip_addresses</code> so that I could pass it in as an argument to the <code class="language-plaintext highlighter-rouge">.write()</code> method when writing to the file <code class="language-plaintext highlighter-rouge">"allow_list.txt"</code>. I used the string <code class="language-plaintext highlighter-rouge">("\n")</code> as the separator to instruct Python to place each element on a new line.</p>

<p>Then, I used another <code class="language-plaintext highlighter-rouge">with</code> statement and the <code class="language-plaintext highlighter-rouge">.write()</code> method to update the file:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Build `with` statement to rewrite the original file
</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">import_file</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>

        <span class="c1"># Rewrite the file, replacing its contents with `ip_addresses`
</span>
        <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">ip_addresses</span><span class="p">)</span>
</code></pre></div></div>

<p>This time, I used a second argument of <code class="language-plaintext highlighter-rouge">"w"</code> with the <code class="language-plaintext highlighter-rouge">open()</code> function in my <code class="language-plaintext highlighter-rouge">with</code> statement. This argument indicates that I want to open a file to write over its contents. When using this argument <code class="language-plaintext highlighter-rouge">"w"</code>, I can call the <code class="language-plaintext highlighter-rouge">.write()</code> function in the body of the <code class="language-plaintext highlighter-rouge">with</code> statement. The <code class="language-plaintext highlighter-rouge">.write()</code> function writes string data to a specified file and replaces any existing file content.</p>

<p>In this case I wanted to write the updated allow list as a string to the file <code class="language-plaintext highlighter-rouge">"allow_list.txt"</code>. This way, the restricted content will no longer be accessible to any IP addresses that were removed from the allow list. To rewrite the file, I appended the <code class="language-plaintext highlighter-rouge">.write()</code> function to the file object <code class="language-plaintext highlighter-rouge">file</code> that I identified in the <code class="language-plaintext highlighter-rouge">with</code> statement. I passed in the <code class="language-plaintext highlighter-rouge">ip_addresses</code> variable as the argument to specify that the contents of the file specified in the <code class="language-plaintext highlighter-rouge">with</code> statement should be replaced with the data in this variable.</p>

<h2 id="summary">Summary</h2>

<p>I created an algorithm that removes IP addresses identified in a <code class="language-plaintext highlighter-rouge">remove_list</code> variable from the <code class="language-plaintext highlighter-rouge">"allow_list.txt"</code> file of approved IP addresses. This algorithm involved opening the file, converting it to a string to be read, and then converting this string to a list stored in the variable <code class="language-plaintext highlighter-rouge">ip_addresses</code>. I then iterated through the IP addresses in <code class="language-plaintext highlighter-rouge">remove_list</code>. With each iteration, I evaluated if the element was part of the <code class="language-plaintext highlighter-rouge">ip_addresses</code> list. If it was, I applied the <code class="language-plaintext highlighter-rouge">.remove()</code> method to it to remove the element from <code class="language-plaintext highlighter-rouge">ip_addresses</code>.. After this, I used the <code class="language-plaintext highlighter-rouge">.join()</code> method to convert the <code class="language-plaintext highlighter-rouge">ip_addresses</code> back into a string so that I could write over the contents of the <code class="language-plaintext highlighter-rouge">"allow_list.txt"</code> file with the revised list of IP addresses.</p>

<h2 id="credentials">Credentials</h2>

<p>The skills and knowledge demonstrated in this article were acquired from my <a href="https://www.coursera.org/account/accomplishments/specialization/certificate/AZYF4ATWUNXF" target="_blank">Google Cybersecurity Certificate</a>. Feel free to view it for verification.</p>]]></content><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Learn how to automate file updates using a Python algorithm]]></summary></entry><entry><title type="html">Crafting a Comprehensive Information Security Policy: A Deep Dive into QuantumVerse Technologies LLC</title><link href="http://localhost:4000/jekyll/update/2023/10/28/information-security-policy.html" rel="alternate" type="text/html" title="Crafting a Comprehensive Information Security Policy: A Deep Dive into QuantumVerse Technologies LLC" /><published>2023-10-28T00:00:00-10:00</published><updated>2023-10-28T00:00:00-10:00</updated><id>http://localhost:4000/jekyll/update/2023/10/28/information-security-policy</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/10/28/information-security-policy.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Information security policies are the backbone of any organization’s cybersecurity defense mechanism. These policies provide a structured approach to securing digital assets, infrastructure, and information. In a recent project for my IS Security Analysis class, I devised a comprehensive information security policy for a hypothetical entity, QuantumVerse Technologies LLC. In this blog, I’ll walk you through the intricate layers of the policy and the rationale behind each section.</p>

<h2 id="quantumverse-technologies-llc-at-a-glance">QuantumVerse Technologies LLC: At a Glance</h2>

<p>QuantumVerse Technologies stands as a beacon of medical innovation, blending cutting-edge technology with healthcare solutions. As such, the company’s data and technological resources are invaluable, making a robust security policy not just necessary but critical.</p>

<h2 id="key-takeaways-from-the-policy">Key Takeaways from the Policy</h2>

<ol>
  <li><strong>Scope and Applicability:</strong> The policy covers every possible data medium - from hardcopy reports to digital databases. It also applies to all personnel and systems that handle information.</li>
  <li><strong>Role Definitions:</strong> The policy starts by defining roles and their responsibilities, like the CEO, CIO, and various other positions, ensuring accountability.</li>
  <li><strong>Application Security:</strong> Emphasizes upholding security standards, delineating responsibilities depending on the management of a software environment or application.</li>
  <li><strong>Data Backup and Storage:</strong> Provides detailed measures for categorizing, backing up, and storing data. This section also emphasizes encryption and periodic restoration tests to maintain data integrity.</li>
  <li><strong>Physical Security:</strong> Highlights the importance of personnel in data security and provides guidelines for building security, ensuring data safety from physical threats.</li>
  <li><strong>Network Device Installation and Configuration:</strong> Addresses the necessity of standardized settings and security configurations for network devices.</li>
  <li><strong>Data Handling:</strong> Classifies data based on sensitivity and provides guidelines for storage, encryption, and sharing.</li>
  <li><strong>Remote Access:</strong> Lays out the framework for granting remote access, ensuring secure connections, and maintaining the security of devices accessing the network remotely.</li>
  <li><strong>Email and Internet Access:</strong> Stresses the judicious use of electronic communication systems, detailing acceptable and prohibited activities.</li>
  <li><strong>Device Security:</strong> Focuses on the importance of registering devices, password protection, encryption, and maintaining the physical security of devices.</li>
  <li><strong>Communicating to Stakeholders:</strong> Establishes the need for transparent communication with stakeholders, regular updates, and emergency communications.</li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>Creating an information security policy requires a deep understanding of the organization’s needs, the potential risks it faces, and the best cybersecurity practices. The policy crafted for QuantumVerse Technologies LLC is a testament to the multifaceted approach needed to ensure comprehensive protection against threats in the digital age.
This project was a valuable exercise in understanding the intricacies of cybersecurity and the importance of a well-drafted policy. As I further my studies in Information Systems and Cybersecurity, I look forward to diving deeper into cybersecurity and contributing to a safer digital future.</p>

<h2 id="about-the-author">About the Author</h2>

<p>I am a student pursuing a B.S. in Information Systems and Cybersecurity. Passionate about the world of digital security, I am dedicated to understanding the complexities of cybersecurity and crafting solutions for a safer digital environment.</p>

<p><a href="/assets\Information_Security_Policy.docx">Download my Information Security Policy</a></p>]]></content><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Introduction Information security policies are the backbone of any organization’s cybersecurity defense mechanism. These policies provide a structured approach to securing digital assets, infrastructure, and information. In a recent project for my IS Security Analysis class, I devised a comprehensive information security policy for a hypothetical entity, QuantumVerse Technologies LLC. In this blog, I’ll walk you through the intricate layers of the policy and the rationale behind each section. QuantumVerse Technologies LLC: At a Glance QuantumVerse Technologies stands as a beacon of medical innovation, blending cutting-edge technology with healthcare solutions. As such, the company’s data and technological resources are invaluable, making a robust security policy not just necessary but critical. Key Takeaways from the Policy Scope and Applicability: The policy covers every possible data medium - from hardcopy reports to digital databases. It also applies to all personnel and systems that handle information. Role Definitions: The policy starts by defining roles and their responsibilities, like the CEO, CIO, and various other positions, ensuring accountability. Application Security: Emphasizes upholding security standards, delineating responsibilities depending on the management of a software environment or application. Data Backup and Storage: Provides detailed measures for categorizing, backing up, and storing data. This section also emphasizes encryption and periodic restoration tests to maintain data integrity. Physical Security: Highlights the importance of personnel in data security and provides guidelines for building security, ensuring data safety from physical threats. Network Device Installation and Configuration: Addresses the necessity of standardized settings and security configurations for network devices. Data Handling: Classifies data based on sensitivity and provides guidelines for storage, encryption, and sharing. Remote Access: Lays out the framework for granting remote access, ensuring secure connections, and maintaining the security of devices accessing the network remotely. Email and Internet Access: Stresses the judicious use of electronic communication systems, detailing acceptable and prohibited activities. Device Security: Focuses on the importance of registering devices, password protection, encryption, and maintaining the physical security of devices. Communicating to Stakeholders: Establishes the need for transparent communication with stakeholders, regular updates, and emergency communications. Conclusion Creating an information security policy requires a deep understanding of the organization’s needs, the potential risks it faces, and the best cybersecurity practices. The policy crafted for QuantumVerse Technologies LLC is a testament to the multifaceted approach needed to ensure comprehensive protection against threats in the digital age. This project was a valuable exercise in understanding the intricacies of cybersecurity and the importance of a well-drafted policy. As I further my studies in Information Systems and Cybersecurity, I look forward to diving deeper into cybersecurity and contributing to a safer digital future. About the Author I am a student pursuing a B.S. in Information Systems and Cybersecurity. Passionate about the world of digital security, I am dedicated to understanding the complexities of cybersecurity and crafting solutions for a safer digital environment. Download my Information Security Policy]]></summary></entry><entry><title type="html">Vulnerability Assessment Report</title><link href="http://localhost:4000/jekyll/update/2023/10/27/vulnerability-assessment-report.html" rel="alternate" type="text/html" title="Vulnerability Assessment Report" /><published>2023-10-27T00:00:00-10:00</published><updated>2023-10-27T00:00:00-10:00</updated><id>http://localhost:4000/jekyll/update/2023/10/27/vulnerability-assessment-report</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/10/27/vulnerability-assessment-report.html"><![CDATA[<h2 id="system-description">System Description</h2>
<p>The server hardware consists of a powerful CPU processor and 128GB of memory. It runs on the latest version of Linux operating system and hosts a MySQL database management system. It is configured with a stable network connection using IPv4 addresses and interacts with other servers on the network. Security measures include SSL/TLS encrypted connections.</p>

<h2 id="scope">Scope</h2>
<p>The scope of this vulnerability assessment relates to the current access controls of the system. The assessment will cover a period of three months, from June 20XX to August 20XX. <a href="https://docs.google.com/document/d/1pRpdpQMEWskxSkwqEMv8W7A7x8GXQlcn0hEcDzWet3Y/template/preview?resourcekey=0-3GRRWAd8HryVgof-Jc33yA" target="_blank">NIST SP 800-30 Rev. 1</a> is used to guide the risk analysis of the information system.</p>

<h2 id="purpose">Purpose</h2>
<p>The database server is a centralized computer system that stores and manages large amounts of data. The server is used to store customer, campaign, and analytic data that can later be analyzed to track performance and personalize marketing efforts. It is critical to secure the system because of its regular use for marketing operations.</p>

<h2 id="risk-assessment">Risk Assessment</h2>

<table>
  <thead>
    <tr>
      <th>Threat source</th>
      <th>Threat event</th>
      <th>Likelihood</th>
      <th>Severity</th>
      <th>Risk</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Hacker</td>
      <td>Obtain sensitive information via exfiltration</td>
      <td>3</td>
      <td>3</td>
      <td>9</td>
    </tr>
    <tr>
      <td>Employee</td>
      <td>Disrupt mission-critical operations</td>
      <td>2</td>
      <td>3</td>
      <td>6</td>
    </tr>
    <tr>
      <td>Customer</td>
      <td>Alter/Delete critical information</td>
      <td>1</td>
      <td>3</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<h2 id="approach">Approach</h2>
<p>Risks that were measured considered the data storage and management procedures of the business. Potential threat sources and events were determined using the likelihood of a security incident given the open access permissions of the information system. The severity of potential incidents were weighed against the impact on day-to-day operational needs.</p>

<h2 id="remediation-strategy">Remediation Strategy</h2>
<p>Implementation of authentication, authorization, and auditing mechanisms to ensure that only authorized users access the database server. This includes using strong passwords, role-based access controls, and multi-factor authentication to limit user privileges. Encryption of data in motion using TLS instead of SSL. IP allow-listing to corporate offices to prevent random users from the internet from connecting to the database.</p>

<h2 id="credentials">Credentials</h2>

<p>The skills and knowledge demonstrated in this article were acquired from my <a href="https://www.coursera.org/account/accomplishments/specialization/certificate/AZYF4ATWUNXF" target="_blank">Google Cybersecurity Certificate</a>. Feel free to view it for verification.</p>]]></content><author><name>Jomael Ortiz Perez (0xjoma)</name><email>jomael.ortizperez.cv@proton.me</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[System Description The server hardware consists of a powerful CPU processor and 128GB of memory. It runs on the latest version of Linux operating system and hosts a MySQL database management system. It is configured with a stable network connection using IPv4 addresses and interacts with other servers on the network. Security measures include SSL/TLS encrypted connections. Scope The scope of this vulnerability assessment relates to the current access controls of the system. The assessment will cover a period of three months, from June 20XX to August 20XX. NIST SP 800-30 Rev. 1 is used to guide the risk analysis of the information system. Purpose The database server is a centralized computer system that stores and manages large amounts of data. The server is used to store customer, campaign, and analytic data that can later be analyzed to track performance and personalize marketing efforts. It is critical to secure the system because of its regular use for marketing operations. Risk Assessment Threat source Threat event Likelihood Severity Risk Hacker Obtain sensitive information via exfiltration 3 3 9 Employee Disrupt mission-critical operations 2 3 6 Customer Alter/Delete critical information 1 3 3 Approach Risks that were measured considered the data storage and management procedures of the business. Potential threat sources and events were determined using the likelihood of a security incident given the open access permissions of the information system. The severity of potential incidents were weighed against the impact on day-to-day operational needs. Remediation Strategy Implementation of authentication, authorization, and auditing mechanisms to ensure that only authorized users access the database server. This includes using strong passwords, role-based access controls, and multi-factor authentication to limit user privileges. Encryption of data in motion using TLS instead of SSL. IP allow-listing to corporate offices to prevent random users from the internet from connecting to the database. Credentials The skills and knowledge demonstrated in this article were acquired from my Google Cybersecurity Certificate. Feel free to view it for verification.]]></summary></entry></feed>