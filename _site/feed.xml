<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-19T17:04:32-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">From Bytes to Blogs</title><subtitle>Aspiring cybersecurity expert and student delving deep into the world of digital defense. Discover my academic projects, insights from my learning journey,  and my passion for ensuring a safer online experience.</subtitle><author><name>Jomael Ortiz Perez (0xjoma)</name></author><entry><title type="html">My Hack The Box Journey Begins</title><link href="http://localhost:4000/jekyll/update/2023/12/19/my-hack-the-box-journey-begins.html" rel="alternate" type="text/html" title="My Hack The Box Journey Begins" /><published>2023-12-19T00:00:00-05:00</published><updated>2023-12-19T00:00:00-05:00</updated><id>http://localhost:4000/jekyll/update/2023/12/19/my-hack-the-box-journey-begins</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/12/19/my-hack-the-box-journey-begins.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I am thrilled to share the beginning of an exhilarating journey with Hack The Box. As I venture into this landscape of challenges and learning, I want to document my experiences, triumphs, and the inevitable hurdles.&lt;/p&gt;

&lt;h2 id=&quot;why-hack-the-box&quot;&gt;Why Hack The Box?&lt;/h2&gt;

&lt;p&gt;Hack The Box isn’t just a platform; it’s a battleground for honing skills, a community of like-minded enthusiasts, and a treasure trove of real-world cybersecurity scenarios. It represents an opportunity to test and expand my knowledge in a practical, engaging environment.&lt;/p&gt;

&lt;h2 id=&quot;my-goals&quot;&gt;My Goals&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Skill Enhancement&lt;/strong&gt;: I aim to deepen my technical expertise, from penetration testing to network security.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Problem-Solving&lt;/strong&gt;: Each box is a puzzle waiting to be solved, pushing me to think like an attacker and a defender.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Staying Current&lt;/strong&gt;: In the ever-evolving field of cybersecurity, staying updated with the latest tools and techniques is crucial.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Networking&lt;/strong&gt;: Engaging with the Hack The Box community to learn from others and share my insights.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Certification Preparation&lt;/strong&gt;: Using the challenges to prepare for various cybersecurity certifications.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-excitement-of-the-challenge&quot;&gt;The Excitement of the Challenge&lt;/h2&gt;

&lt;p&gt;There’s an undeniable thrill in cracking a box, uncovering vulnerabilities, and gaining access. Each success is a testament to skill and perseverance, while each setback is a learning opportunity.&lt;/p&gt;

&lt;h2 id=&quot;documenting-the-journey&quot;&gt;Documenting the Journey&lt;/h2&gt;

&lt;p&gt;I’ll be sharing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Walkthroughs and Insights&lt;/strong&gt;: Detailed accounts of my approach to solving boxes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lessons Learned&lt;/strong&gt;: Reflections on technical skills and the broader cybersecurity concepts.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Personal Growth&lt;/strong&gt;: Tracking my progress as I evolve from a novice to a seasoned cybersecurity enthusiast.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This journey with Hack The Box is more than just a series of challenges; it’s a pathway to mastery in cybersecurity and to help me prepare for my Masters in Cybersecurity focused in Security Architecture starting in the summer of 2024. I’m excited to dive in, learn, share, and grow. Stay tuned for updates, stories, and the knowledge I gain!&lt;/p&gt;

&lt;p&gt;If you are thinking of joining Hack The Box, use my &lt;a href=&quot;https://referral.hackthebox.com/mz5coVU&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you do not like clicking on links copy and paste below.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://referral.hackthebox.com/mz5coVU
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">Introduction</summary></entry><entry><title type="html">Uncovering New Evidence Using Bootable Forensic Utilities</title><link href="http://localhost:4000/jekyll/update/2023/12/11/uncovering-new-evidence-using-bootable-forensic-utilities.html" rel="alternate" type="text/html" title="Uncovering New Evidence Using Bootable Forensic Utilities" /><published>2023-12-11T00:00:00-05:00</published><updated>2023-12-11T00:00:00-05:00</updated><id>http://localhost:4000/jekyll/update/2023/12/11/uncovering-new-evidence-using-bootable-forensic-utilities</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/12/11/uncovering-new-evidence-using-bootable-forensic-utilities.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In the ever-evolving realm of Digital Forensics, the use of sophisticated forensic software tools stands at the forefront of uncovering pivotal evidence in computer-related crimes. My recent experience in a Digital Forensics class, involving a hands-on lab session, offered a deep dive into this intriguing and crucial aspect of digital investigation. The lab was not only educational but also immensely engaging, providing a practical perspective on how different tools are employed in the field of digital forensics.&lt;/p&gt;

&lt;p&gt;Digital Forensics, primarily concerned with the recovery and investigation of material found in digital devices, plays a critical role in solving crimes that involve digital evidence. The lab focused on demonstrating the functionalities and applications of various forensic tools, each uniquely designed to aid in the meticulous process of evidence extraction and analysis. This report will delve into the specifics of the lab, the tools used, and the insights gained from this practical exposure to the world of digital forensic investigation.&lt;/p&gt;

&lt;h2 id=&quot;tools-used&quot;&gt;Tools Used&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;BrowsingHistoryView&lt;/strong&gt;: This tool is used to view the web browsing history on a computer. It compiles information from various browsers and presents it in a single interface. This can be crucial in determining what websites were accessed from a particular device, which can provide insights into user behavior or intent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FavoritesView&lt;/strong&gt;: This software is designed to recover and view the list of bookmarks or “favorites” from various web browsers. Similar to browsing history, this data can offer clues about the user’s interests, intentions, or activities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Helix&lt;/strong&gt;: Helix is a more comprehensive forensic tool that often comes as a bootable CD. It includes various utilities for system analysis, data recovery, and forensics. Helix can be used for tasks like secure data deletion, network analysis, and memory dumping, making it versatile for different aspects of digital forensics.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IECacheView&lt;/strong&gt;: This tool is specifically for Internet Explorer and allows forensic analysts to view and extract the browser’s web cache. The web cache contains temporary internet files, including web pages, images, and other media the user has accessed. This can be useful for reconstructing a user’s internet activities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IECookiesView&lt;/strong&gt;: Similar to IECacheView but specifically for cookies in Internet Explorer, this tool allows forensic experts to view and analyze cookies, which can provide information about the websites visited, login sessions, and user preferences.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MyLastSearch&lt;/strong&gt;: This tool is designed to recover the search queries made on a device. It can extract search queries from popular search engines and social media platforms. This information can be vital in understanding the user’s intentions and activities before a specific event or action.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ProcessExplorer&lt;/strong&gt;: This more advanced system utility provides detailed information about which files and directories are opened by specific processes. It helps understand the behavior of running programs and can be used to detect malicious activities, such as hidden processes or unauthorized access to files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a forensic investigation, these tools are typically used to collect, analyze, and preserve digital evidence from devices like computers, smartphones, or storage media. The evidence gathered can be used in legal contexts, such as criminal investigations, civil litigations, or corporate audits.&lt;/p&gt;

&lt;h2 id=&quot;methodologies-used-in-forensic-investigations&quot;&gt;Methodologies Used in Forensic Investigations&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Computer Forensics Methodology
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Preparation&lt;/strong&gt;: Before starting the investigation, investigators prepare by gathering the necessary tools software, and ensuring legal compliance.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Preservation&lt;/strong&gt;: The primary step is to preserve the digital evidence. This involves creating a forensic image of the data storage devices, ensuring the original data remains unaltered.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Analysis&lt;/strong&gt;: In this phase, forensic analysts examine the digital copies of the storage media, using various tools to recover deleted, encrypted, or damaged files and extract relevant data.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: This step involves keeping detailed records of the investigation process, findings, and the chain of custody of the evidence.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Reporting&lt;/strong&gt;: The final step is compiling the findings into a comprehensive report that can be presented in legal proceedings.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Network Forensics Methodology
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Capture&lt;/strong&gt;: This involves capturing and monitoring network traffic. This can be achieved by deploying network sniffers or intrusion detection systems.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Examination&lt;/strong&gt;: The captured data is then examined to identify suspicious activities or anomalies indicating unauthorized access or other malicious activities.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Analysis&lt;/strong&gt;: This phase goes deeper into investigating the nature of the network traffic, identifying the traffic sources, and reconstructing any unauthorized activities.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Correlation&lt;/strong&gt;: Investigators may correlate data from various sources to build a comprehensive picture of the incident.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Reporting&lt;/strong&gt;: Like computer forensics, the findings are documented in a detailed report.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;common-forensic-certifications&quot;&gt;Common Forensic Certifications&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Certified Computer Examiner (CCE)&lt;/strong&gt;: Offered by the International Society of Forensic Computer Examiners, this certification focuses on the methodologies and best practices for computer forensics. It is widely recognized and emphasizes practical, hands-on experience.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Certified Forensic Computer Examiner (CFCE)&lt;/strong&gt;: Provided by the International Association of Computer Investigative Specialists, this certification involves peer review and independent study. It covers various aspects of computer forensics, including legal issues, digital evidence handling, and forensic analysis techniques.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Certified Information Systems Security Professional (CISSP)&lt;/strong&gt;: Though broader in scope, the CISSP certification by (ISC)² covers aspects of digital forensics as part of its comprehensive information security and cybersecurity curriculum. It is highly regarded in various IT security roles, including forensics.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;evidence-handling-tasks-in-forensic-investigations&quot;&gt;Evidence-Handling Tasks in Forensic Investigations&lt;/h2&gt;

&lt;p&gt;Evidence-handling tasks in forensic investigations are crucial for maintaining the integrity and admissibility of the evidence. These tasks include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Collection&lt;/strong&gt;: Securely collecting digital evidence from various sources like hard drives, mobile devices, and cloud storage. This must be done carefully to avoid altering or damaging the evidence.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Preservation&lt;/strong&gt;: Ensuring that the collected evidence is preserved in its original form. This often involves making bit-by-bit copies of digital storage devices.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: Maintaining detailed records of how the evidence was collected, handled, and analyzed. This includes documenting the chain of custody, which is a record of everyone who handled the evidence.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transportation&lt;/strong&gt;: Safely transporting the evidence to the forensic laboratory or storage. This requires secure and tamper-evident containers to prevent unauthorized access or alterations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: Storing the evidence in a secure environment to prevent damage or unauthorized access. This is crucial for maintaining the validity of the evidence throughout the investigation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Analysis&lt;/strong&gt;: Forensic analysts examine the evidence using various techniques and tools, ensuring that the analysis does not alter the original data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reporting&lt;/strong&gt;: Preparing detailed reports that summarize the findings, methodologies used, and the evidence’s relevance in the investigation context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These tasks are essential to ensure the evidence remains reliable and can be used effectively in legal proceedings or investigative processes.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The in-depth exploration of various forensic tools and methodologies in my Digital Forensics class provides a comprehensive understanding of these tools’ critical role in solving digital crimes. From BrowsingHistoryView to ProcessExplorer, each tool offers unique capabilities in uncovering hidden or deleted data, analyzing user behavior, and piecing together digital interactions. The methodologies, ranging from computer to network forensics, highlight the systematic and meticulous approach required in this field to ensure the integrity and admissibility of evidence.&lt;/p&gt;

&lt;p&gt;The lab experience also emphasized the importance of proper evidence handling, from collection to reporting, underscoring the meticulous nature of forensic investigations. It became evident that every step, whether preserving the digital evidence or documenting the chain of custody, is vital to maintaining the evidence’s reliability and legal standing.&lt;/p&gt;

&lt;p&gt;Furthermore, learning about the various forensic certifications reinforced the need for continuous learning and skill development in this rapidly evolving field. Certifications like CCE, CFCE, and CISSP validate expertise and ensure that professionals stay updated with the latest techniques and legal requirements.&lt;/p&gt;

&lt;p&gt;Overall, this lab experience was not just about learning the use of tools; it was an immersive journey into the complexities and challenges of digital forensics. It sheds light on the importance of digital evidence in modern investigations and the rigorous processes involved in extracting and preserving this evidence. This knowledge is invaluable for anyone aspiring to a career in digital forensics, offering a solid foundation for facing real-world challenges in this dynamic and critical field.&lt;/p&gt;

&lt;h2 id=&quot;source&quot;&gt;Source&lt;/h2&gt;

&lt;p&gt;Easttom, C. (2017). System Forensics, Investigation, and Response (3rd ed.). Jones &amp;amp; Bartlett Learning.&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">Introduction</summary></entry><entry><title type="html">How To Set Up Kali Linux On Macbook Pro, M1 Using VMWARE</title><link href="http://localhost:4000/jekyll/update/2023/12/09/how-to-set-up-kali-linux-on-macbook-pro-m1-using-vmware.html" rel="alternate" type="text/html" title="How To Set Up Kali Linux On Macbook Pro, M1 Using VMWARE" /><published>2023-12-09T00:00:00-05:00</published><updated>2023-12-09T00:00:00-05:00</updated><id>http://localhost:4000/jekyll/update/2023/12/09/how-to-set-up-kali-linux-on-macbook-pro-m1-using-vmware</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/12/09/how-to-set-up-kali-linux-on-macbook-pro-m1-using-vmware.html">&lt;h2 id=&quot;project-description&quot;&gt;Project Description&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Objective&lt;/strong&gt;: This blog post aims to provide a comprehensive guide on how to install Kali Linux, a leading Linux distribution for security and penetration testing, on a MacBook Pro equipped with the Apple M1 chip using VMWare. The guide is tailored for users who wish to utilize the powerful features of Kali Linux on Apple’s innovative M1 hardware, overcoming compatibility challenges.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;: The guide is designed for cybersecurity professionals, IT students, and tech enthusiasts who have a basic understanding of operating systems and virtualization. It’s particularly beneficial for those who use MacBook Pro M1 and want to leverage Kali Linux for security assessments, ethical hacking, or educational purposes.&lt;/p&gt;

&lt;h2 id=&quot;background-linux-on-apples-m1-chip&quot;&gt;Background: Linux on Apple’s M1 Chip&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Advent of Apple Silicon&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;In late 2020, Apple introduced its M1 chip, a significant leap in ARM-based processors, marking a departure from Intel CPUs. The M1 chip promised improved performance and energy efficiency, setting a new standard for personal computing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial Compatibility Challenges&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The shift to the M1 chip, however, presented notable challenges for Linux distributions, including Kali Linux. The primary hurdle was the ARM architecture, vastly different from the x86 architecture used by Intel and AMD processors, which most Linux distributions were primarily designed for.
This architectural change necessitated significant modifications in the Linux kernel and other software components to ensure compatibility with the M1’s hardware.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Progress and Development&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The Linux community, known for its resilience and adaptability, began working on solutions. Efforts were directed towards developing compatible Linux kernels and ensuring software compatibility.
Over time, virtualization emerged as a viable solution, with tools like VMWare updating their software to support ARM architecture, thereby enabling the running of ARM-compatible Linux distributions on M1 MacBooks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State of Linux on M1 Today&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;As of now, the Linux experience on M1 MacBooks has improved substantially, with many distributions, including Kali Linux, offering versions that work well with ARM architecture. However, the process can still involve specific workarounds and configurations, especially when using virtualization platforms like VMWare.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kali Linux and M1: A Synergy of Security and Performance&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Kali Linux, being a top choice for security professionals, offers a unique advantage when run on the powerful and efficient M1 chip. This combination provides an ideal platform for security testing and research, combining the robust toolset of Kali Linux with the cutting-edge performance of Apple’s M1 hardware.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Guide’s Purpose&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The upcoming guide aims to simplify this process, offering step-by-step instructions and insights to successfully install and run Kali Linux on a MacBook Pro M1 using VMWare, bridging the gap between advanced security tools and the latest in hardware innovation.&lt;/p&gt;

&lt;h2 id=&quot;installing-kali-linux-on-macbook-pro-m1-using-vmware&quot;&gt;Installing Kali Linux on MacBook Pro M1 Using VMWare&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;MacBook Pro with M1 Chip: Ensure your MacBook Pro is equipped with the M1 chip.&lt;/li&gt;
  &lt;li&gt;VMWare Fusion for Mac: As of my last update in April 2023, VMWare Fusion offers support for M1 Macs. Download the latest version compatible with ARM architecture from the VMWare website.&lt;/li&gt;
  &lt;li&gt;Kali Linux ARM Image: Download the ARM-compatible version of Kali Linux from the official Kali Linux website.&lt;/li&gt;
  &lt;li&gt;Sufficient Storage Space: Ensure you have enough space on your MacBook Pro for a virtual machine (VM) — at least 20GB is recommended.&lt;/li&gt;
  &lt;li&gt;Backup Your Data: Always back up your data before proceeding with such installations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Install VMWare Fusion&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Install VMWare Fusion on your MacBook Pro following the instructions provided on the VMWare website.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Setting Up a New Virtual Machine&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Open VMWare Fusion.&lt;/li&gt;
      &lt;li&gt;Choose to create a new virtual machine.
Drag and drop the Kali Linux ARM image file onto the VMWare Fusion window or use the ‘Install from disc or image’ option.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Customize Your Virtual Machine&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Memory and Processors&lt;/strong&gt;: Allocate memory (RAM) and CPU cores. It’s recommended to allocate at least 2GB of RAM and 2 CPU cores for smooth operation.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Hard Disk&lt;/strong&gt;: Ensure the VM has enough space. A minimum of 20GB is recommended for Kali Linux.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Network Adapter&lt;/strong&gt;: Choose the network settings suitable for your requirements, either NAT or Bridged networking.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Begin the Installation Process&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Follow the on-screen instructions to start the installation of Kali Linux.&lt;/li&gt;
      &lt;li&gt;Select the appropriate options during the setup, including language, location, keyboard layout, and disk partitioning.&lt;/li&gt;
      &lt;li&gt;When prompted, set the root password and create a new user if required.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Finalizing Installation&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Allow the installation to complete. This process may take some time.&lt;/li&gt;
      &lt;li&gt;Once the installation is finished, VMWare Fusion should automatically boot into Kali Linux.
If not, restart the VM and boot into the newly installed Kali Linux.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Installing VMWare Tools (Optional, but Recommended)&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Once Kali Linux is up and running, install VMWare Tools for better performance and usability.&lt;/li&gt;
      &lt;li&gt;Open the terminal in Kali Linux and run the command to install VMWare Tools &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install open-vm-tools-desktop -y&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Restart the VM after the installation.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Update and Upgrade Kali Linux&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;It’s important to update Kali Linux to the latest version.&lt;/li&gt;
      &lt;li&gt;Open the terminal and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get update&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get upgrade&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Configuring Kali Linux&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Once updated, you can configure Kali Linux as per your requirements.&lt;/li&gt;
      &lt;li&gt;Install additional security tools and software as needed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;post-installation&quot;&gt;Post-Installation:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Test Network Connectivity&lt;/strong&gt;: Check if the internet is working correctly in the Kali Linux VM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Snapshots&lt;/strong&gt;: Use VMWare Fusion to create snapshots of your VM. This allows you to revert to a known state if something goes wrong later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explore Kali Linux&lt;/strong&gt;: Familiarize yourself with the Kali Linux environment and its tools.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h2&gt;

&lt;p&gt;Installing Kali Linux on a MacBook Pro M1 using VMWare Fusion is a straightforward process, but it requires careful attention to detail. This setup allows you to leverage the powerful capabilities of Kali Linux for security testing and ethical hacking while taking advantage of the performance benefits of the M1 chip. Enjoy exploring the vast array of tools and features that Kali Linux offers!&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Kali Linux Official Website:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For downloading the ARM-compatible version of Kali Linux.&lt;/p&gt;

&lt;p&gt;Website: &lt;a href=&quot;https://www.kali.org/get-kali/#kali-arm&quot;&gt;Kali Linux Downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VMware Fusion:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get the latest version of VMware Fusion compatible with Apple M1 Macs.&lt;/p&gt;

&lt;p&gt;Website: &lt;a href=&quot;https://www.vmware.com/products/fusion.html&quot;&gt;VMware Fusion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VMware Fusion Documentation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For detailed instructions and support related to VMware Fusion.&lt;/p&gt;

&lt;p&gt;Documentation: &lt;a href=&quot;https://docs.vmware.com/en/VMware-Fusion/index.html&quot;&gt;VMware Fusion Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple M1 Chip Information:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To understand more about the Apple M1 chip’s specifications and capabilities.&lt;/p&gt;

&lt;p&gt;Apple M1 Info: &lt;a href=&quot;https://www.apple.com/mac/m1/&quot;&gt;Apple M1 Chip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kali Linux Documentation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For specific guidance on using Kali Linux, including installation and configuration.&lt;/p&gt;

&lt;p&gt;Documentation: &lt;a href=&quot;https://www.kali.org/docs/&quot;&gt;Kali Linux Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kali Linux Forums and Community:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To seek help, share experiences, and troubleshoot issues related to Kali Linux.&lt;/p&gt;

&lt;p&gt;Community Forum: &lt;a href=&quot;https://forums.kali.org/&quot;&gt;Kali Linux Forums&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple Support:&lt;/strong&gt;
For assistance with macOS and hardware-specific queries.&lt;/p&gt;

&lt;p&gt;Support: &lt;a href=&quot;https://support.apple.com/&quot;&gt;Apple Support&lt;/a&gt;&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">Project Description</summary></entry><entry><title type="html">Creating a Vulnerability Assessment Tool (VAT) with Python: Part I</title><link href="http://localhost:4000/jekyll/update/2023/11/16/creating-a-vulnerability-assessment-tool-part-1.html" rel="alternate" type="text/html" title="Creating a Vulnerability Assessment Tool (VAT) with Python: Part I" /><published>2023-11-16T00:00:00-05:00</published><updated>2023-11-16T00:00:00-05:00</updated><id>http://localhost:4000/jekyll/update/2023/11/16/creating-a-vulnerability-assessment-tool-part-1</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/11/16/creating-a-vulnerability-assessment-tool-part-1.html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The development focused on creating a Python-based vulnerability assessment tool, specifically targeting XSS (Cross-Site Scripting) vulnerabilities. The tool is designed to be run from the command line and allows users to scan specified URLs for potential vulnerabilities. It features modular code for easy maintenance and scalability.&lt;/p&gt;

&lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;CLI Parsing (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cli.py&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Responsible for parsing command-line arguments.&lt;/li&gt;
  &lt;li&gt;Arguments include the target URL, chosen plugin (defaulting to XSS), and an option to disable SSL verification.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# cli.py - Command line interface for VAT
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Vulnerability Assessment Tool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target URL to scan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Vulnerability plugin to use. Default is XSS.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--no-verify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;store_true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Disable SSL verification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Request Handling (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests_handler.py&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Manages HTTPS/S requests to the target URL&lt;/li&gt;
  &lt;li&gt;Handles SSL verification and related errors, providing an option to proceed without SSL verification upon user confirmation.&lt;/li&gt;
  &lt;li&gt;Detailed SSL error messages are logged to a file for troubleshooting while presenting simplified messages to the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# requests_handler.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests.exceptions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLError&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Basic configuration for logging
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'error_log.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%(asctime)s:%(levelname)s:%(message)s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_ssl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify_ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify_ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SSL Certificate Error encountered for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl_error&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SSL Certificate Error: The site's security certificate is not trusted.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Proceed without SSL verification? (yes/no): &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'yes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Proceeding without SSL verification...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestException&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error: Failed to make the request without SSL verification.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestException&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error: Failed to make the request. Details: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;XSS Plugin (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xss.py&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; directory)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_xss&lt;/code&gt; function that sends a payload to the target URL to test for reflected XSS vulnerabilities.&lt;/li&gt;
  &lt;li&gt;Utilizes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_request&lt;/code&gt; function from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_handler.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# xss.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;..requests_handler&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_request&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_xss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_ssl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# A basic payload
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;script&amp;gt;alert('xss')&amp;lt;/script&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_made&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_ssl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify_ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_made&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_made&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Main Script (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vat.py&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Integrates all components.&lt;/li&gt;
  &lt;li&gt;Orchestrates the workflow based on user input from the CLI.&lt;/li&gt;
  &lt;li&gt;Handles final output messages to the user based on the scan results and any encountered issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# vat.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;src.vat.cli&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_arguments&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;src.vat.requests_handler&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;src.vat.plugins.xss&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_xss&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Parse CLI arguments
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scanning &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; using the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; plugin...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Handle SSL verification based on CLI argument
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;verify_ssl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_verify&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Check for vulnerabilities based on the chosen plugin
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vulnerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performed_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_xss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performed_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vulnerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is vulnerable to XSS!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is not vulnerable to XSS.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Error message is printed by the requests_handler module
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scanning of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; was aborted due to SSL verification failure.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;key-features-and-functionality&quot;&gt;Key Features and Functionality&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;SSL Verification
    &lt;ul&gt;
      &lt;li&gt;The tool rigorously handles SSL certificate verification.&lt;/li&gt;
      &lt;li&gt;In case of SSL errors, users are prompted to choose whether to proceed without SSL verification.&lt;/li&gt;
      &lt;li&gt;Detailed SSL errors are logged to error_log.txt, keeping user interaction clean and non-technical.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;XSS Vulnerability Checking
    &lt;ul&gt;
      &lt;li&gt;The tool checks for a basic form of reflected XSS.&lt;/li&gt;
      &lt;li&gt;Sends a test payload and checks if it is reflected in the response from the target URL.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;User-Friendly Interface
    &lt;ul&gt;
      &lt;li&gt;Despite the complexity of the operations, the tool maintains a user-friendly command-line interface.&lt;/li&gt;
      &lt;li&gt;Clear and concise messages are provided to the user, avoiding technical jargon and redundancy.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Modular and Scalable Design:
    &lt;ul&gt;
      &lt;li&gt;Code is organized into distinct modules for specific functionalities, promoting maintainability and scalability.&lt;/li&gt;
      &lt;li&gt;The structure allows for easy addition of new features or plugins in the future.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;testing-and-validation&quot;&gt;Testing and Validation&lt;/h2&gt;

&lt;p&gt;The tool has been tested with various scenarios, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;URLs with valid SSL certificates.&lt;/li&gt;
  &lt;li&gt;URLs with SSL certificate issues (e.g., https://expired.badssl.com/).&lt;/li&gt;
  &lt;li&gt;With and without the –no-verify flag to test SSL verification handling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all scenarios, the tool behaved as expected, providing appropriate user prompts and logging detailed errors where necessary.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Throughout the development of this vulnerability assessment tool, I have gained significant insights and accomplished several key objectives. This project not only enhanced my technical skills in Python programming but also deepened my understanding of software design principles and security considerations in application development.&lt;/p&gt;

&lt;h2 id=&quot;key-learnings-and-accomplishments&quot;&gt;Key Learnings and Accomplishments:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Modular Programming:&lt;/strong&gt; By structuring the project into separate modules like cli.py, requests_handler.py, and xss.py, I learned the importance of modular design. This approach not only made the code more organized and maintainable but also simplified debugging and testing processes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Handling User Interactions:&lt;/strong&gt; Implementing a user-friendly command-line interface taught me how to balance technical functionality with user experience. Crafting clear and non-technical messages, especially when handling SSL verification, was crucial in making the tool accessible to users without deep technical backgrounds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Error Handling and Logging:&lt;/strong&gt; Dealing with SSL errors and implementing logging mechanisms was a significant learning curve. I learned to effectively catch and log errors while keeping the user interface clean. This aspect of the project underscored the importance of robust error handling in building reliable software.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security Practices:&lt;/strong&gt; Working on a tool focused on detecting XSS vulnerabilities offered practical insights into web security vulnerabilities. It heightened my awareness of the security aspects crucial in software development and the importance of proactive testing for vulnerabilities.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;future-scalability-and-enhancements&quot;&gt;Future Scalability and Enhancements&lt;/h2&gt;

&lt;p&gt;Looking ahead, there are several avenues for enhancing and scaling this tool:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Expanding Vulnerability Checks:&lt;/strong&gt;  The current focus is on XSS vulnerabilities. I plan to extend the tool’s capabilities to include other common vulnerabilities like SQL injection, CSRF, and more, turning it into a more comprehensive security assessment tool.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Improved Logging and Reporting:&lt;/strong&gt;  Enhancing the logging system to include more detailed reports, potentially with an option to generate summary reports, would make the tool more useful for in-depth security analysis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;User Interface Enhancements:&lt;/strong&gt;  Incorporating more interactive elements into the CLI, such as progress indicators and more detailed help messages, could further improve the user experience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Automated Testing and CI Integration:&lt;/strong&gt;  Implementing automated tests and integrating the tool into a continuous integration (CI) pipeline would ensure its reliability and effectiveness in real-world scenarios.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Customization and Configurability:&lt;/strong&gt;  Adding options for users to customize payloads and scan parameters would make the tool more versatile and adaptable to different testing environments.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, this project has been an immensely enriching experience, combining practical software development with the intricacies of web security. The skills and knowledge gained lay a strong foundation for future projects, especially in the realms of cybersecurity and software development. I look forward to continuing to enhance the tool, adding new features, and applying these learnings to future endeavors.&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">Overview The development focused on creating a Python-based vulnerability assessment tool, specifically targeting XSS (Cross-Site Scripting) vulnerabilities. The tool is designed to be run from the command line and allows users to scan specified URLs for potential vulnerabilities. It features modular code for easy maintenance and scalability. Project Structure CLI Parsing (cli.py) Responsible for parsing command-line arguments. Arguments include the target URL, chosen plugin (defaulting to XSS), and an option to disable SSL verification. # cli.py - Command line interface for VAT import argparse def parse_arguments(): parser = argparse.ArgumentParser(description=&quot;Vulnerability Assessment Tool&quot;) parser.add_argument(&quot;url&quot;, help=&quot;Target URL to scan&quot;) parser.add_argument(&quot;--plugin&quot;, default=&quot;xss&quot;, choices=[&quot;xss&quot;], help=&quot;Vulnerability plugin to use. Default is XSS.&quot;) parser.add_argument(&quot;--no-verify&quot;, action=&quot;store_true&quot;, help=&quot;Disable SSL verification&quot;) return parser.parse_args() Request Handling (requests_handler.py) Manages HTTPS/S requests to the target URL Handles SSL verification and related errors, providing an option to proceed without SSL verification upon user confirmation. Detailed SSL error messages are logged to a file for troubleshooting while presenting simplified messages to the user. # requests_handler.py import requests from requests.exceptions import SSLError import logging # Basic configuration for logging logging.basicConfig(filename='error_log.txt', level=logging.ERROR, format='%(asctime)s:%(levelname)s:%(message)s') def make_request(url, payload=None, verify_ssl=True): try: if payload: response = requests.get(url, params=payload, verify=verify_ssl) else: response = requests.get(url, verify=verify_ssl) return response, True except SSLError as ssl_error: logging.error(f&quot;SSL Certificate Error encountered for {url}: {ssl_error}&quot;) print(&quot;SSL Certificate Error: The site's security certificate is not trusted.&quot;) choice = input(&quot;Proceed without SSL verification? (yes/no): &quot;).lower() if choice == 'yes': print(&quot;Proceeding without SSL verification...&quot;) try: if payload: response = requests.get(url, params=payload, verify=False) else: response = requests.get(url, verify=False) return response, True except requests.RequestException as e: print(&quot;Error: Failed to make the request without SSL verification.&quot;) return None, False else: return None, False except requests.RequestException as e: print(f&quot;Error: Failed to make the request. Details: {e}&quot;) return None, False XSS Plugin (xss.py in plugins directory) Contains the check_xss function that sends a payload to the target URL to test for reflected XSS vulnerabilities. Utilizes the make_request function from request_handler.py. # xss.py from ..requests_handler import make_request def check_xss(url, verify_ssl=True): # A basic payload payload = &quot;&amp;lt;script&amp;gt;alert('xss')&amp;lt;/script&amp;gt;&quot; response, request_made = make_request(url, {&quot;q&quot;: payload}, verify_ssl=verify_ssl) if response: return (payload in response.text, request_made) else: return False, request_made Main Script (vat.py) Integrates all components. Orchestrates the workflow based on user input from the CLI. Handles final output messages to the user based on the scan results and any encountered issues. # vat.py from src.vat.cli import parse_arguments from src.vat.requests_handler import make_request from src.vat.plugins.xss import check_xss def main(): # Parse CLI arguments args = parse_arguments() print(f&quot;Scanning {args.url} using the {args.plugin} plugin...&quot;) # Handle SSL verification based on CLI argument verify_ssl = not args.no_verify # Check for vulnerabilities based on the chosen plugin if args.plugin == &quot;xss&quot;: vulnerable, performed_check = check_xss(args.url, verify_ssl) if performed_check: if vulnerable: print(f&quot;{args.url} is vulnerable to XSS!&quot;) else: print(f&quot;{args.url} is not vulnerable to XSS.&quot;) else: # Error message is printed by the requests_handler module print(f&quot;Scanning of {args.url} was aborted due to SSL verification failure.&quot;) if __name__ == &quot;__main__&quot;: main() Key Features and Functionality SSL Verification The tool rigorously handles SSL certificate verification. In case of SSL errors, users are prompted to choose whether to proceed without SSL verification. Detailed SSL errors are logged to error_log.txt, keeping user interaction clean and non-technical. XSS Vulnerability Checking The tool checks for a basic form of reflected XSS. Sends a test payload and checks if it is reflected in the response from the target URL. User-Friendly Interface Despite the complexity of the operations, the tool maintains a user-friendly command-line interface. Clear and concise messages are provided to the user, avoiding technical jargon and redundancy. Modular and Scalable Design: Code is organized into distinct modules for specific functionalities, promoting maintainability and scalability. The structure allows for easy addition of new features or plugins in the future. Testing and Validation The tool has been tested with various scenarios, including: URLs with valid SSL certificates. URLs with SSL certificate issues (e.g., https://expired.badssl.com/). With and without the –no-verify flag to test SSL verification handling. In all scenarios, the tool behaved as expected, providing appropriate user prompts and logging detailed errors where necessary. Conclusion Throughout the development of this vulnerability assessment tool, I have gained significant insights and accomplished several key objectives. This project not only enhanced my technical skills in Python programming but also deepened my understanding of software design principles and security considerations in application development. Key Learnings and Accomplishments: Modular Programming: By structuring the project into separate modules like cli.py, requests_handler.py, and xss.py, I learned the importance of modular design. This approach not only made the code more organized and maintainable but also simplified debugging and testing processes. Handling User Interactions: Implementing a user-friendly command-line interface taught me how to balance technical functionality with user experience. Crafting clear and non-technical messages, especially when handling SSL verification, was crucial in making the tool accessible to users without deep technical backgrounds. Error Handling and Logging: Dealing with SSL errors and implementing logging mechanisms was a significant learning curve. I learned to effectively catch and log errors while keeping the user interface clean. This aspect of the project underscored the importance of robust error handling in building reliable software. Security Practices: Working on a tool focused on detecting XSS vulnerabilities offered practical insights into web security vulnerabilities. It heightened my awareness of the security aspects crucial in software development and the importance of proactive testing for vulnerabilities. Future Scalability and Enhancements Looking ahead, there are several avenues for enhancing and scaling this tool: Expanding Vulnerability Checks: The current focus is on XSS vulnerabilities. I plan to extend the tool’s capabilities to include other common vulnerabilities like SQL injection, CSRF, and more, turning it into a more comprehensive security assessment tool. Improved Logging and Reporting: Enhancing the logging system to include more detailed reports, potentially with an option to generate summary reports, would make the tool more useful for in-depth security analysis. User Interface Enhancements: Incorporating more interactive elements into the CLI, such as progress indicators and more detailed help messages, could further improve the user experience. Automated Testing and CI Integration: Implementing automated tests and integrating the tool into a continuous integration (CI) pipeline would ensure its reliability and effectiveness in real-world scenarios. Customization and Configurability: Adding options for users to customize payloads and scan parameters would make the tool more versatile and adaptable to different testing environments. Finally, this project has been an immensely enriching experience, combining practical software development with the intricacies of web security. The skills and knowledge gained lay a strong foundation for future projects, especially in the realms of cybersecurity and software development. I look forward to continuing to enhance the tool, adding new features, and applying these learnings to future endeavors.</summary></entry><entry><title type="html">Update A File Through Python Algorithm</title><link href="http://localhost:4000/jekyll/update/2023/11/03/update-a-file-through-python-algorithm.html" rel="alternate" type="text/html" title="Update A File Through Python Algorithm" /><published>2023-11-03T00:00:00-04:00</published><updated>2023-11-03T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2023/11/03/update-a-file-through-python-algorithm</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/11/03/update-a-file-through-python-algorithm.html">&lt;h2 id=&quot;project-description&quot;&gt;Project Description&lt;/h2&gt;

&lt;p&gt;At my organization, access to restricted content is controlled with an allow list of IP addresses. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allow_list.txt&lt;/code&gt; file identifies these IP addresses. A separate remove list identifies IP addresses that should no longer have access to this content. I created an algorithm to automate updating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allow_list.txt&lt;/code&gt; file and remove these IP addresses that should no longer have access.&lt;/p&gt;

&lt;h2 id=&quot;open-the-file-that-contains-the-allow-list&quot;&gt;Open The File That Contains The Allow List&lt;/h2&gt;

&lt;p&gt;For the first part of the algorithm, I opened the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allow_list.txt&lt;/code&gt; file. First, I assigned this file name as a string to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import_file&lt;/code&gt; variable:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# Assign `import_file` to the name of the file
&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;import_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;allow_list.txt&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then, I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement to open the file:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Build `with` statement to read the name in the initial contents of the file
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my algorithm, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement is used with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.open()&lt;/code&gt; function in read mode to open the allow list file for the purpose of reading it. The purpose of opening the file is to allow me to access the IP addresses stored in the allow list file. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; keyword will help manage the resources by closing the file after exiting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement. In the code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with open(import_file, &quot;r&quot;) as file:&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open()&lt;/code&gt; function has two parameters. The first identifies the file to import, and then the second indicates what I want to do with the file. In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;r&quot;&lt;/code&gt; indicates that I want to read it. The code also uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as&lt;/code&gt; keyword to assign a variable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; stores the output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.open()&lt;/code&gt; function while I work within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement.&lt;/p&gt;

&lt;h2 id=&quot;read-the-file-contents&quot;&gt;Read The File Contents&lt;/h2&gt;

&lt;p&gt;In order to read the file contents, I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.read()&lt;/code&gt; method to convert it into the string.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Use `.read()` to read the imported file and store it in a variable named `ip_addresses`
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ip_addresses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.open()&lt;/code&gt; function that includes the argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;r&quot;&lt;/code&gt; for “read,” I can call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.read()&lt;/code&gt; function in the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement. The .&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt; method converts the file into a string and allows me to read it. I applied the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.read()&lt;/code&gt; method to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; variable identified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement. Then, I assigned the string output of this method to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In summary, this code reads the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;allow_list.txt&quot;&lt;/code&gt; file into a string format that allows me to later use the string to organize and extract data in my Python program.&lt;/p&gt;

&lt;h2 id=&quot;convert-the-string-into-a-list&quot;&gt;Convert The String Into A List&lt;/h2&gt;

&lt;p&gt;In order to remove individual IP addresses from the allow list, I needed it to be in list format. Therefore, I next used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.split()&lt;/code&gt; method to convert the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; string into a list:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Use `.split()` to convert `ip_addresses` from a string to a list
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ip_addresses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.split()&lt;/code&gt; function is called by appending it to a string variable. It works by converting the contents of a string to a list. The purpose of splitting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; into a list is to make it easier to remove IP addresses from the allow list. By default, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.split()&lt;/code&gt; function splits the text by whitespace into list elements. In this algorithm, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.split()&lt;/code&gt; function takes the data stored in the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;, which is a string of IP addresses that are each separated by a whitespace, and it converts this string into a list of IP addresses. To store this list, I reassigned it back to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;iterate-through-the-remove-list&quot;&gt;Iterate Through The Remove List&lt;/h2&gt;

&lt;p&gt;A key part of my algorithm involves iterating through the IP addresses that are elements in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_list&lt;/code&gt;. To do this, I incorporated a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loop:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Build iterative statement
# Name loop variable `element`
# Loop through `remove_list`
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loop in Python repeats code for a specified sequence. The overall purpose of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loop in a Python algorithm like this is to apply specific code statements to all elements in a sequence. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; keyword starts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loop. It is followed by the loop variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;element&lt;/code&gt; and the keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt;. The keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; indicates to iterate through the sequence &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; and assign each value to the loop variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;element&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;remove-ip-addresses-that-are-on-the-remove-list&quot;&gt;Remove IP Addresses That Are On The Remove List&lt;/h2&gt;

&lt;p&gt;My algorithm requires removing any IP address from the allow list, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;, that is also contained in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_list&lt;/code&gt;.  Because there were not any duplicates in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;, I was able to use the following code to do this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Create conditional statement to evaluate if `element` is in `ip_addresses`
&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;# use the `.remove()` method to remove
&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# elements from `ip_addresses`
&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;ip_addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, within my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, I created a conditional that evaluated whether or not the loop variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;element&lt;/code&gt; was found in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; list. I did this because applying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.remove()&lt;/code&gt; to elements that were not found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; would result in an error.&lt;/p&gt;

&lt;p&gt;Then, within that conditional, I applied &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.remove()&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;. I passed in the loop variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;element&lt;/code&gt; as the argument so that each IP address that was in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_list&lt;/code&gt; would be removed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;update-the-file-with-the-revised-list-of-ip-addresses&quot;&gt;Update The File With The Revised List Of IP Addresses&lt;/h2&gt;

&lt;p&gt;As a final step in my algorithm, I needed to update the allow list file with the revised list of IP addresses. To do so, I first needed to convert the list back into a string. I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.join()&lt;/code&gt; method for this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Convert `ip_addresses` back to a string so that it can be written into the text file
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ip_addresses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.join()&lt;/code&gt; method combines all items in an iterable into a string. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.join()&lt;/code&gt; method is applied to a string containing characters that will separate the elements in the iterable once joined into a string. In this algorithm, I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.join()&lt;/code&gt; method to create a string from the list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; so that I could pass it in as an argument to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.write()&lt;/code&gt; method when writing to the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;allow_list.txt&quot;&lt;/code&gt;. I used the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&quot;\n&quot;)&lt;/code&gt; as the separator to instruct Python to place each element on a new line.&lt;/p&gt;

&lt;p&gt;Then, I used another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.write()&lt;/code&gt; method to update the file:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Build `with` statement to rewrite the original file
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Rewrite the file, replacing its contents with `ip_addresses`
&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time, I used a second argument of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;w&quot;&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open()&lt;/code&gt; function in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement. This argument indicates that I want to open a file to write over its contents. When using this argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;w&quot;&lt;/code&gt;, I can call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.write()&lt;/code&gt; function in the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.write()&lt;/code&gt; function writes string data to a specified file and replaces any existing file content.&lt;/p&gt;

&lt;p&gt;In this case I wanted to write the updated allow list as a string to the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;allow_list.txt&quot;&lt;/code&gt;. This way, the restricted content will no longer be accessible to any IP addresses that were removed from the allow list. To rewrite the file, I appended the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.write()&lt;/code&gt; function to the file object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; that I identified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement. I passed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; variable as the argument to specify that the contents of the file specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statement should be replaced with the data in this variable.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I created an algorithm that removes IP addresses identified in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_list&lt;/code&gt; variable from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;allow_list.txt&quot;&lt;/code&gt; file of approved IP addresses. This algorithm involved opening the file, converting it to a string to be read, and then converting this string to a list stored in the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;. I then iterated through the IP addresses in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_list&lt;/code&gt;. With each iteration, I evaluated if the element was part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; list. If it was, I applied the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.remove()&lt;/code&gt; method to it to remove the element from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt;.. After this, I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.join()&lt;/code&gt; method to convert the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addresses&lt;/code&gt; back into a string so that I could write over the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;allow_list.txt&quot;&lt;/code&gt; file with the revised list of IP addresses.&lt;/p&gt;

&lt;h2 id=&quot;credentials&quot;&gt;Credentials&lt;/h2&gt;

&lt;p&gt;The skills and knowledge demonstrated in this article were acquired from my &lt;a href=&quot;https://www.coursera.org/account/accomplishments/specialization/certificate/AZYF4ATWUNXF&quot; target=&quot;_blank&quot;&gt;Google Cybersecurity Certificate&lt;/a&gt;. Feel free to view it for verification.&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">Project Description At my organization, access to restricted content is controlled with an allow list of IP addresses. The allow_list.txt file identifies these IP addresses. A separate remove list identifies IP addresses that should no longer have access to this content. I created an algorithm to automate updating the allow_list.txt file and remove these IP addresses that should no longer have access. Open The File That Contains The Allow List For the first part of the algorithm, I opened the allow_list.txt file. First, I assigned this file name as a string to the import_file variable: # Assign `import_file` to the name of the file import_file = &quot;allow_list.txt&quot; Then, I used a with statement to open the file: # Build `with` statement to read the name in the initial contents of the file with open(import_file, &quot;r&quot;) as file: In my algorithm, the with statement is used with the .open() function in read mode to open the allow list file for the purpose of reading it. The purpose of opening the file is to allow me to access the IP addresses stored in the allow list file. The with keyword will help manage the resources by closing the file after exiting the with statement. In the code with open(import_file, &quot;r&quot;) as file:, the open() function has two parameters. The first identifies the file to import, and then the second indicates what I want to do with the file. In this case, &quot;r&quot; indicates that I want to read it. The code also uses the as keyword to assign a variable named file; file stores the output of the .open() function while I work within the with statement. Read The File Contents In order to read the file contents, I used the .read() method to convert it into the string. with open(import_file, &quot;r&quot;) as file: # Use `.read()` to read the imported file and store it in a variable named `ip_addresses` ip_addresses = file.read() When using an .open() function that includes the argument &quot;r&quot; for “read,” I can call the .read() function in the body of the with statement. The .read() method converts the file into a string and allows me to read it. I applied the .read() method to the file variable identified in the with statement. Then, I assigned the string output of this method to the variable ip_addresses. In summary, this code reads the contents of the &quot;allow_list.txt&quot; file into a string format that allows me to later use the string to organize and extract data in my Python program. Convert The String Into A List In order to remove individual IP addresses from the allow list, I needed it to be in list format. Therefore, I next used the .split() method to convert the ip_addresses string into a list: # Use `.split()` to convert `ip_addresses` from a string to a list ip_addresses = ip_addresses.split() The .split() function is called by appending it to a string variable. It works by converting the contents of a string to a list. The purpose of splitting ip_addresses into a list is to make it easier to remove IP addresses from the allow list. By default, the .split() function splits the text by whitespace into list elements. In this algorithm, the .split() function takes the data stored in the variable ip_addresses, which is a string of IP addresses that are each separated by a whitespace, and it converts this string into a list of IP addresses. To store this list, I reassigned it back to the variable ip_addresses. Iterate Through The Remove List A key part of my algorithm involves iterating through the IP addresses that are elements in the remove_list. To do this, I incorporated a for loop: # Build iterative statement # Name loop variable `element` # Loop through `remove_list` for element in remove_list: The for loop in Python repeats code for a specified sequence. The overall purpose of the for loop in a Python algorithm like this is to apply specific code statements to all elements in a sequence. The for keyword starts the for loop. It is followed by the loop variable element and the keyword in. The keyword in indicates to iterate through the sequence ip_addresses and assign each value to the loop variable element. Remove IP Addresses That Are On The Remove List My algorithm requires removing any IP address from the allow list, ip_addresses, that is also contained in remove_list. Because there were not any duplicates in ip_addresses, I was able to use the following code to do this: for element in remove_list: # Create conditional statement to evaluate if `element` is in `ip_addresses` if element in ip_addresses: # use the `.remove()` method to remove # elements from `ip_addresses` ip_addresses.remove(element) First, within my for loop, I created a conditional that evaluated whether or not the loop variable element was found in the ip_addresses list. I did this because applying .remove() to elements that were not found in ip_addresses would result in an error. Then, within that conditional, I applied .remove() to ip_addresses. I passed in the loop variable element as the argument so that each IP address that was in the remove_list would be removed from ip_addresses. Update The File With The Revised List Of IP Addresses As a final step in my algorithm, I needed to update the allow list file with the revised list of IP addresses. To do so, I first needed to convert the list back into a string. I used the .join() method for this: # Convert `ip_addresses` back to a string so that it can be written into the text file ip_addresses = &quot;\n&quot;.join(ip_addresses) The .join() method combines all items in an iterable into a string. The .join() method is applied to a string containing characters that will separate the elements in the iterable once joined into a string. In this algorithm, I used the .join() method to create a string from the list ip_addresses so that I could pass it in as an argument to the .write() method when writing to the file &quot;allow_list.txt&quot;. I used the string (&quot;\n&quot;) as the separator to instruct Python to place each element on a new line. Then, I used another with statement and the .write() method to update the file: # Build `with` statement to rewrite the original file with open(import_file, &quot;w&quot;) as file: # Rewrite the file, replacing its contents with `ip_addresses` file.write(ip_addresses) This time, I used a second argument of &quot;w&quot; with the open() function in my with statement. This argument indicates that I want to open a file to write over its contents. When using this argument &quot;w&quot;, I can call the .write() function in the body of the with statement. The .write() function writes string data to a specified file and replaces any existing file content. In this case I wanted to write the updated allow list as a string to the file &quot;allow_list.txt&quot;. This way, the restricted content will no longer be accessible to any IP addresses that were removed from the allow list. To rewrite the file, I appended the .write() function to the file object file that I identified in the with statement. I passed in the ip_addresses variable as the argument to specify that the contents of the file specified in the with statement should be replaced with the data in this variable. Summary I created an algorithm that removes IP addresses identified in a remove_list variable from the &quot;allow_list.txt&quot; file of approved IP addresses. This algorithm involved opening the file, converting it to a string to be read, and then converting this string to a list stored in the variable ip_addresses. I then iterated through the IP addresses in remove_list. With each iteration, I evaluated if the element was part of the ip_addresses list. If it was, I applied the .remove() method to it to remove the element from ip_addresses.. After this, I used the .join() method to convert the ip_addresses back into a string so that I could write over the contents of the &quot;allow_list.txt&quot; file with the revised list of IP addresses. Credentials The skills and knowledge demonstrated in this article were acquired from my Google Cybersecurity Certificate. Feel free to view it for verification.</summary></entry><entry><title type="html">Crafting a Comprehensive Information Security Policy: A Deep Dive into QuantumVerse Technologies LLC</title><link href="http://localhost:4000/jekyll/update/2023/10/28/information-security-policy.html" rel="alternate" type="text/html" title="Crafting a Comprehensive Information Security Policy: A Deep Dive into QuantumVerse Technologies LLC" /><published>2023-10-28T00:00:00-04:00</published><updated>2023-10-28T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2023/10/28/information-security-policy</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/10/28/information-security-policy.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Information security policies are the backbone of any organization’s cybersecurity defense mechanism. These policies provide a structured approach to securing digital assets, infrastructure, and information. In a recent project for my IS Security Analysis class, I devised a comprehensive information security policy for a hypothetical entity, QuantumVerse Technologies LLC. In this blog, I’ll walk you through the intricate layers of the policy and the rationale behind each section.&lt;/p&gt;

&lt;h2 id=&quot;quantumverse-technologies-llc-at-a-glance&quot;&gt;QuantumVerse Technologies LLC: At a Glance&lt;/h2&gt;

&lt;p&gt;QuantumVerse Technologies stands as a beacon of medical innovation, blending cutting-edge technology with healthcare solutions. As such, the company’s data and technological resources are invaluable, making a robust security policy not just necessary but critical.&lt;/p&gt;

&lt;h2 id=&quot;key-takeaways-from-the-policy&quot;&gt;Key Takeaways from the Policy&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Scope and Applicability:&lt;/strong&gt; The policy covers every possible data medium - from hardcopy reports to digital databases. It also applies to all personnel and systems that handle information.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Role Definitions:&lt;/strong&gt; The policy starts by defining roles and their responsibilities, like the CEO, CIO, and various other positions, ensuring accountability.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Application Security:&lt;/strong&gt; Emphasizes upholding security standards, delineating responsibilities depending on the management of a software environment or application.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Backup and Storage:&lt;/strong&gt; Provides detailed measures for categorizing, backing up, and storing data. This section also emphasizes encryption and periodic restoration tests to maintain data integrity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Physical Security:&lt;/strong&gt; Highlights the importance of personnel in data security and provides guidelines for building security, ensuring data safety from physical threats.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Network Device Installation and Configuration:&lt;/strong&gt; Addresses the necessity of standardized settings and security configurations for network devices.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Handling:&lt;/strong&gt; Classifies data based on sensitivity and provides guidelines for storage, encryption, and sharing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Remote Access:&lt;/strong&gt; Lays out the framework for granting remote access, ensuring secure connections, and maintaining the security of devices accessing the network remotely.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Email and Internet Access:&lt;/strong&gt; Stresses the judicious use of electronic communication systems, detailing acceptable and prohibited activities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Device Security:&lt;/strong&gt; Focuses on the importance of registering devices, password protection, encryption, and maintaining the physical security of devices.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Communicating to Stakeholders:&lt;/strong&gt; Establishes the need for transparent communication with stakeholders, regular updates, and emergency communications.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Creating an information security policy requires a deep understanding of the organization’s needs, the potential risks it faces, and the best cybersecurity practices. The policy crafted for QuantumVerse Technologies LLC is a testament to the multifaceted approach needed to ensure comprehensive protection against threats in the digital age.
This project was a valuable exercise in understanding the intricacies of cybersecurity and the importance of a well-drafted policy. As I further my studies in Information Systems and Cybersecurity, I look forward to diving deeper into cybersecurity and contributing to a safer digital future.&lt;/p&gt;

&lt;h2 id=&quot;about-the-author&quot;&gt;About the Author&lt;/h2&gt;

&lt;p&gt;I am a student pursuing a B.S. in Information Systems and Cybersecurity. Passionate about the world of digital security, I am dedicated to understanding the complexities of cybersecurity and crafting solutions for a safer digital environment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets\Information_Security_Policy.docx&quot;&gt;Download my Information Security Policy&lt;/a&gt;&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">Introduction Information security policies are the backbone of any organization’s cybersecurity defense mechanism. These policies provide a structured approach to securing digital assets, infrastructure, and information. In a recent project for my IS Security Analysis class, I devised a comprehensive information security policy for a hypothetical entity, QuantumVerse Technologies LLC. In this blog, I’ll walk you through the intricate layers of the policy and the rationale behind each section. QuantumVerse Technologies LLC: At a Glance QuantumVerse Technologies stands as a beacon of medical innovation, blending cutting-edge technology with healthcare solutions. As such, the company’s data and technological resources are invaluable, making a robust security policy not just necessary but critical. Key Takeaways from the Policy Scope and Applicability: The policy covers every possible data medium - from hardcopy reports to digital databases. It also applies to all personnel and systems that handle information. Role Definitions: The policy starts by defining roles and their responsibilities, like the CEO, CIO, and various other positions, ensuring accountability. Application Security: Emphasizes upholding security standards, delineating responsibilities depending on the management of a software environment or application. Data Backup and Storage: Provides detailed measures for categorizing, backing up, and storing data. This section also emphasizes encryption and periodic restoration tests to maintain data integrity. Physical Security: Highlights the importance of personnel in data security and provides guidelines for building security, ensuring data safety from physical threats. Network Device Installation and Configuration: Addresses the necessity of standardized settings and security configurations for network devices. Data Handling: Classifies data based on sensitivity and provides guidelines for storage, encryption, and sharing. Remote Access: Lays out the framework for granting remote access, ensuring secure connections, and maintaining the security of devices accessing the network remotely. Email and Internet Access: Stresses the judicious use of electronic communication systems, detailing acceptable and prohibited activities. Device Security: Focuses on the importance of registering devices, password protection, encryption, and maintaining the physical security of devices. Communicating to Stakeholders: Establishes the need for transparent communication with stakeholders, regular updates, and emergency communications. Conclusion Creating an information security policy requires a deep understanding of the organization’s needs, the potential risks it faces, and the best cybersecurity practices. The policy crafted for QuantumVerse Technologies LLC is a testament to the multifaceted approach needed to ensure comprehensive protection against threats in the digital age. This project was a valuable exercise in understanding the intricacies of cybersecurity and the importance of a well-drafted policy. As I further my studies in Information Systems and Cybersecurity, I look forward to diving deeper into cybersecurity and contributing to a safer digital future. About the Author I am a student pursuing a B.S. in Information Systems and Cybersecurity. Passionate about the world of digital security, I am dedicated to understanding the complexities of cybersecurity and crafting solutions for a safer digital environment. Download my Information Security Policy</summary></entry><entry><title type="html">Vulnerability Assessment Report</title><link href="http://localhost:4000/jekyll/update/2023/10/27/vulnerability-assessment-report.html" rel="alternate" type="text/html" title="Vulnerability Assessment Report" /><published>2023-10-27T00:00:00-04:00</published><updated>2023-10-27T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2023/10/27/vulnerability-assessment-report</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/10/27/vulnerability-assessment-report.html">&lt;h2 id=&quot;system-description&quot;&gt;System Description&lt;/h2&gt;
&lt;p&gt;The server hardware consists of a powerful CPU processor and 128GB of memory. It runs on the latest version of Linux operating system and hosts a MySQL database management system. It is configured with a stable network connection using IPv4 addresses and interacts with other servers on the network. Security measures include SSL/TLS encrypted connections.&lt;/p&gt;

&lt;h2 id=&quot;scope&quot;&gt;Scope&lt;/h2&gt;
&lt;p&gt;The scope of this vulnerability assessment relates to the current access controls of the system. The assessment will cover a period of three months, from June 20XX to August 20XX. &lt;a href=&quot;https://docs.google.com/document/d/1pRpdpQMEWskxSkwqEMv8W7A7x8GXQlcn0hEcDzWet3Y/template/preview?resourcekey=0-3GRRWAd8HryVgof-Jc33yA&quot; target=&quot;_blank&quot;&gt;NIST SP 800-30 Rev. 1&lt;/a&gt; is used to guide the risk analysis of the information system.&lt;/p&gt;

&lt;h2 id=&quot;purpose&quot;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;The database server is a centralized computer system that stores and manages large amounts of data. The server is used to store customer, campaign, and analytic data that can later be analyzed to track performance and personalize marketing efforts. It is critical to secure the system because of its regular use for marketing operations.&lt;/p&gt;

&lt;h2 id=&quot;risk-assessment&quot;&gt;Risk Assessment&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Threat source&lt;/th&gt;
      &lt;th&gt;Threat event&lt;/th&gt;
      &lt;th&gt;Likelihood&lt;/th&gt;
      &lt;th&gt;Severity&lt;/th&gt;
      &lt;th&gt;Risk&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Hacker&lt;/td&gt;
      &lt;td&gt;Obtain sensitive information via exfiltration&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Employee&lt;/td&gt;
      &lt;td&gt;Disrupt mission-critical operations&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Customer&lt;/td&gt;
      &lt;td&gt;Alter/Delete critical information&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;
&lt;p&gt;Risks that were measured considered the data storage and management procedures of the business. Potential threat sources and events were determined using the likelihood of a security incident given the open access permissions of the information system. The severity of potential incidents were weighed against the impact on day-to-day operational needs.&lt;/p&gt;

&lt;h2 id=&quot;remediation-strategy&quot;&gt;Remediation Strategy&lt;/h2&gt;
&lt;p&gt;Implementation of authentication, authorization, and auditing mechanisms to ensure that only authorized users access the database server. This includes using strong passwords, role-based access controls, and multi-factor authentication to limit user privileges. Encryption of data in motion using TLS instead of SSL. IP allow-listing to corporate offices to prevent random users from the internet from connecting to the database.&lt;/p&gt;

&lt;h2 id=&quot;credentials&quot;&gt;Credentials&lt;/h2&gt;

&lt;p&gt;The skills and knowledge demonstrated in this article were acquired from my &lt;a href=&quot;https://www.coursera.org/account/accomplishments/specialization/certificate/AZYF4ATWUNXF&quot; target=&quot;_blank&quot;&gt;Google Cybersecurity Certificate&lt;/a&gt;. Feel free to view it for verification.&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">System Description The server hardware consists of a powerful CPU processor and 128GB of memory. It runs on the latest version of Linux operating system and hosts a MySQL database management system. It is configured with a stable network connection using IPv4 addresses and interacts with other servers on the network. Security measures include SSL/TLS encrypted connections. Scope The scope of this vulnerability assessment relates to the current access controls of the system. The assessment will cover a period of three months, from June 20XX to August 20XX. NIST SP 800-30 Rev. 1 is used to guide the risk analysis of the information system. Purpose The database server is a centralized computer system that stores and manages large amounts of data. The server is used to store customer, campaign, and analytic data that can later be analyzed to track performance and personalize marketing efforts. It is critical to secure the system because of its regular use for marketing operations. Risk Assessment Threat source Threat event Likelihood Severity Risk Hacker Obtain sensitive information via exfiltration 3 3 9 Employee Disrupt mission-critical operations 2 3 6 Customer Alter/Delete critical information 1 3 3 Approach Risks that were measured considered the data storage and management procedures of the business. Potential threat sources and events were determined using the likelihood of a security incident given the open access permissions of the information system. The severity of potential incidents were weighed against the impact on day-to-day operational needs. Remediation Strategy Implementation of authentication, authorization, and auditing mechanisms to ensure that only authorized users access the database server. This includes using strong passwords, role-based access controls, and multi-factor authentication to limit user privileges. Encryption of data in motion using TLS instead of SSL. IP allow-listing to corporate offices to prevent random users from the internet from connecting to the database. Credentials The skills and knowledge demonstrated in this article were acquired from my Google Cybersecurity Certificate. Feel free to view it for verification.</summary></entry><entry><title type="html">Apply Filters to SQL Queries</title><link href="http://localhost:4000/jekyll/update/2023/10/26/apply-filters-to-sql-queries.html" rel="alternate" type="text/html" title="Apply Filters to SQL Queries" /><published>2023-10-26T00:00:00-04:00</published><updated>2023-10-26T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2023/10/26/apply-filters-to-sql-queries</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/10/26/apply-filters-to-sql-queries.html">&lt;h2 id=&quot;project-description&quot;&gt;Project Description&lt;/h2&gt;

&lt;p&gt;My organization is working to make their system more secure. It is my job to ensure the system is safe, investigate all potential security issues, and update employee computers as needed. The following steps provide examples of how I used SQL with filters to perform security-related tasks.&lt;/p&gt;

&lt;h2 id=&quot;retrieve-after-hours-failed-login-attempts&quot;&gt;Retrieve After Hours Failed Login Attempts&lt;/h2&gt;

&lt;p&gt;There was a potential security incident that occurred after business hours (after 18:00). All after hours login attempts that failed need to be investigated.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how I created a SQL query to filter for failed login attempts that occurred after business hours.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\apply-filters-sql-queries\retrieve-after-hours-failed-login-attempts.png&quot; alt=&quot;A screenshot of an SQL query to filter for failed login attempts that occurred after business hours.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first part of the screenshot is my query, and the second part is a portion of the output. This query filters for failed login attempts that occurred after 18:00. First, I started by selecting all data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_in_attempts&lt;/code&gt; table. Then, I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt;clause with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt; operator to filter my results to output only login attempts that occurred after 18:00 and were unsuccessful. The first condition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login_time &amp;gt; '18:00',&lt;/code&gt; which filters for the login attempts that occurred after 18:00. The second condition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;success = FALSE&lt;/code&gt;, which filters for the failed login attempts.&lt;/p&gt;

&lt;h2 id=&quot;retrieve-login-attempts-on-specific-dates&quot;&gt;Retrieve Login Attempts On Specific Dates&lt;/h2&gt;

&lt;p&gt;A suspicious event occurred on 2022-05-09. Any login activity that happened on 2022-05-09 or on the day before needs to be investigated.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how I created a SQL query to filter for login attempts that occurred on specific dates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\apply-filters-sql-queries\filter-login-attempts-specific-dates.png&quot; alt=&quot;A screenshot of an SQL query to filter for login attempts that occurred on specific dates.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first part of the screenshot is my query, and the second part is a portion of the output. This query returns all login attempts that occurred on 2022-05-09 or 2022-05-08. First, I started by selecting all data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_in_attempts&lt;/code&gt; table. Then, I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OR&lt;/code&gt; operator to filter my results to output only login attempts that occurred on either 2022-05-09 or 2022-05-08. The first condition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login_date = '2022-05-09'&lt;/code&gt;, which filters for logins on 2022-05-09. The second condition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login_date = '2022-05-08'&lt;/code&gt;, which filters for logins on 2022-05-08.&lt;/p&gt;

&lt;h2 id=&quot;retrieve-login-attempts-outside-of-mexico&quot;&gt;Retrieve Login Attempts outside of Mexico&lt;/h2&gt;

&lt;p&gt;After investigating the organization’s data on login attempts, I believe there is an issue with the login attempts that occurred outside of Mexico. These login attempts should be investigated.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how I created a SQL query to filter for login attempts that occurred outside of Mexico.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\apply-filters-sql-queries\filter-login-attempts-outside-mexico.png&quot; alt=&quot;A screenshot of an SQL query to filter for login attempts that occurred outside of Mexico.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first part of the screenshot is my query, and the second part is a portion of the output. This query returns all login attempts that occurred in countries other than Mexico. First, I started by selecting all data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_in_attempts&lt;/code&gt; table. Then, I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT&lt;/code&gt; to filter for countries other than Mexico. I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIKE&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MEX%&lt;/code&gt; as the pattern to match because the dataset represents Mexico as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MEX&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MEXICO&lt;/code&gt;. The percentage sign (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;) represents any number of unspecified characters when used with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIKE&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;retrieve-employees-in-marketing&quot;&gt;Retrieve Employees In Marketing&lt;/h2&gt;

&lt;p&gt;My team wants to update the computers for certain employees in the Marketing department. To do this, I have to get information on which employee machines to update.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how I created a SQL query to filter for employee machines from employees in the Marketing department in the East building.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\apply-filters-sql-queries\retrieve-employees-in-marketing.png&quot; alt=&quot;A screenshot of an SQL query to filter for employee machines from employees in the Marketing department in the East building.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first part of the screenshot is my query, and the second part is a portion of the output. This query returns all employees in the Marketing department in the East building. First, I started by selecting all data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employees&lt;/code&gt; table. Then, I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt;clause with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt; to filter for employees who work in the Marketing department and in the East building. I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIKE&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;East%&lt;/code&gt; as the pattern to match because the data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;office&lt;/code&gt; column represents the East building with the specific office number. The first condition is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;department = 'Marketing'&lt;/code&gt; portion, which filters for employees in the Marketing department. The second condition is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;office LIKE 'East%'&lt;/code&gt; portion, which filters for employees in the East building.&lt;/p&gt;

&lt;h2 id=&quot;retrieve-employees-in-finance-or-sales&quot;&gt;Retrieve Employees In Finance Or Sales&lt;/h2&gt;

&lt;p&gt;The machines for employees in the Finance and Sales departments also need to be updated. Since a different security update is needed, I have to get information on employees only from these two departments.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how I created a SQL query to filter for employee machines from employees in the Finance or Sales departments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\apply-filters-sql-queries\retrieve-employees-in-finance-or-sales.png&quot; alt=&quot;A screenshot of an SQL query to filter for employee machines from employees in the Finance or Sales departments.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first part of the screenshot is my query, and the second part is a portion of the output. This query returns all employees in the Finance and Sales departments. First, I started by selecting all data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employees&lt;/code&gt; table. Then, I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OR&lt;/code&gt; to filter for employees who are in the Finance and Sales departments. I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OR&lt;/code&gt; operator instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt; because I want all employees who are in either department. The first condition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;department = 'Finance'&lt;/code&gt;, which filters for employees from the Finance department. The second condition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;department = 'Sales'&lt;/code&gt;, which filters for employees from the Sales department.&lt;/p&gt;

&lt;h2 id=&quot;retrieve-all-employees-not-in-it&quot;&gt;Retrieve All Employees Not In IT&lt;/h2&gt;

&lt;p&gt;My team needs to make one more security update on employees who are not in the Information Technology department. To make the update, I first have to get information on these employees.&lt;/p&gt;

&lt;p&gt;The following demonstrates how I created a SQL query to filter for employee machines from employees not in the  Information Technology department.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\apply-filters-sql-queries\employees-not-in-it.png&quot; alt=&quot;A screenshot of an SQL query to filter for employee machines from employees not in the Information Technology department.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first part of the screenshot is my query, and the second part is a portion of the output. The query returns all employees not in the Information Technology department. First, I started by selecting all data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employees&lt;/code&gt; table. Then, I used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT&lt;/code&gt; to filter for employees not in this department.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I applied filters to SQL queries to get specific information on login attempts and employee machines. I used two different tables, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_in_attempts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employees&lt;/code&gt;. I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OR&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT&lt;/code&gt; operators to filter for the specific information needed for each task. I also used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIKE&lt;/code&gt; and the percentage sign (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;) wildcard to filter for patterns.&lt;/p&gt;

&lt;h2 id=&quot;credentials&quot;&gt;Credentials&lt;/h2&gt;

&lt;p&gt;The skills and knowledge demonstrated in this article were acquired from my &lt;a href=&quot;https://www.coursera.org/account/accomplishments/specialization/certificate/AZYF4ATWUNXF&quot; target=&quot;_blank&quot;&gt;Google Cybersecurity Certificate&lt;/a&gt;. Feel free to view it for verification.&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">Project Description My organization is working to make their system more secure. It is my job to ensure the system is safe, investigate all potential security issues, and update employee computers as needed. The following steps provide examples of how I used SQL with filters to perform security-related tasks. Retrieve After Hours Failed Login Attempts There was a potential security incident that occurred after business hours (after 18:00). All after hours login attempts that failed need to be investigated. The following code demonstrates how I created a SQL query to filter for failed login attempts that occurred after business hours. The first part of the screenshot is my query, and the second part is a portion of the output. This query filters for failed login attempts that occurred after 18:00. First, I started by selecting all data from the log_in_attempts table. Then, I used a WHEREclause with an AND operator to filter my results to output only login attempts that occurred after 18:00 and were unsuccessful. The first condition is login_time &amp;gt; '18:00', which filters for the login attempts that occurred after 18:00. The second condition is success = FALSE, which filters for the failed login attempts. Retrieve Login Attempts On Specific Dates A suspicious event occurred on 2022-05-09. Any login activity that happened on 2022-05-09 or on the day before needs to be investigated. The following code demonstrates how I created a SQL query to filter for login attempts that occurred on specific dates. The first part of the screenshot is my query, and the second part is a portion of the output. This query returns all login attempts that occurred on 2022-05-09 or 2022-05-08. First, I started by selecting all data from the log_in_attempts table. Then, I used a WHERE clause with an OR operator to filter my results to output only login attempts that occurred on either 2022-05-09 or 2022-05-08. The first condition is login_date = '2022-05-09', which filters for logins on 2022-05-09. The second condition is login_date = '2022-05-08', which filters for logins on 2022-05-08. Retrieve Login Attempts outside of Mexico After investigating the organization’s data on login attempts, I believe there is an issue with the login attempts that occurred outside of Mexico. These login attempts should be investigated. The following code demonstrates how I created a SQL query to filter for login attempts that occurred outside of Mexico. The first part of the screenshot is my query, and the second part is a portion of the output. This query returns all login attempts that occurred in countries other than Mexico. First, I started by selecting all data from the log_in_attempts table. Then, I used a WHERE clause with NOT to filter for countries other than Mexico. I used LIKE with MEX% as the pattern to match because the dataset represents Mexico as MEX and MEXICO. The percentage sign (%) represents any number of unspecified characters when used with LIKE. Retrieve Employees In Marketing My team wants to update the computers for certain employees in the Marketing department. To do this, I have to get information on which employee machines to update. The following code demonstrates how I created a SQL query to filter for employee machines from employees in the Marketing department in the East building. The first part of the screenshot is my query, and the second part is a portion of the output. This query returns all employees in the Marketing department in the East building. First, I started by selecting all data from the employees table. Then, I used a WHEREclause with AND to filter for employees who work in the Marketing department and in the East building. I used LIKE with East% as the pattern to match because the data in the office column represents the East building with the specific office number. The first condition is the department = 'Marketing' portion, which filters for employees in the Marketing department. The second condition is the office LIKE 'East%' portion, which filters for employees in the East building. Retrieve Employees In Finance Or Sales The machines for employees in the Finance and Sales departments also need to be updated. Since a different security update is needed, I have to get information on employees only from these two departments. The following code demonstrates how I created a SQL query to filter for employee machines from employees in the Finance or Sales departments. The first part of the screenshot is my query, and the second part is a portion of the output. This query returns all employees in the Finance and Sales departments. First, I started by selecting all data from the employees table. Then, I used a WHERE clause with OR to filter for employees who are in the Finance and Sales departments. I used the OR operator instead of AND because I want all employees who are in either department. The first condition is department = 'Finance', which filters for employees from the Finance department. The second condition is department = 'Sales', which filters for employees from the Sales department. Retrieve All Employees Not In IT My team needs to make one more security update on employees who are not in the Information Technology department. To make the update, I first have to get information on these employees. The following demonstrates how I created a SQL query to filter for employee machines from employees not in the Information Technology department. The first part of the screenshot is my query, and the second part is a portion of the output. The query returns all employees not in the Information Technology department. First, I started by selecting all data from the employees table. Then, I used a WHERE clause with NOT to filter for employees not in this department. Summary I applied filters to SQL queries to get specific information on login attempts and employee machines. I used two different tables, log_in_attempts and employees. I used the AND, OR, and NOT operators to filter for the specific information needed for each task. I also used LIKE and the percentage sign (%) wildcard to filter for patterns. Credentials The skills and knowledge demonstrated in this article were acquired from my Google Cybersecurity Certificate. Feel free to view it for verification.</summary></entry><entry><title type="html">File Permissions in Linux</title><link href="http://localhost:4000/jekyll/update/2023/10/24/file-permissions-in-linux.html" rel="alternate" type="text/html" title="File Permissions in Linux" /><published>2023-10-24T00:00:00-04:00</published><updated>2023-10-24T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2023/10/24/file-permissions-in-linux</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/10/24/file-permissions-in-linux.html">&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;The research team at my organization needs to update the file permissions for certain files and directories within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projects&lt;/code&gt; directory. The permissions do not currently reflect the level of authorization that should be given. Checking and updating these permissions will help keep their system secure. To complete this task, I performed the following tasks:&lt;/p&gt;

&lt;h2 id=&quot;check-file-and-directory-details&quot;&gt;Check File and Directory Details&lt;/h2&gt;

&lt;p&gt;The following code demonstrates how I used Linux commands to determine the existing permissions set for a specific directory in the file system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\file-permissions-in-linux\check-file-and-directory-details.png&quot; alt=&quot;A screenshot of Linux commands to determine the existing permissions set for a specific directory in the file system.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first line of the screenshot displays the command I entered, and the other lines display the output. The code lists all contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projects&lt;/code&gt; directory. I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-la&lt;/code&gt; option to display a detailed listing of the file contents that also returned hidden files. The output of my command indicates that there is one directory named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drafts&lt;/code&gt;, one hidden file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.project_x.txt&lt;/code&gt;, and five other project files. The 10-character string in the first column represents the permissions set on each file or directory.&lt;/p&gt;

&lt;h2 id=&quot;describe-the-permissions-string&quot;&gt;Describe the Permissions String&lt;/h2&gt;

&lt;p&gt;The 10-character string can be deconstructed to determine who is authorized to access the file and their specific permissions. The characters and what they represent are as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;1st character&lt;/strong&gt;: This character is either a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; or hyphen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-)&lt;/code&gt; and indicates the file type. If it’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;, it’s a directory. If it’s a hyphen
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-)&lt;/code&gt;, it’s a regular file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2nd-4th characters:&lt;/strong&gt; These characters indicate the read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(r)&lt;/code&gt;, write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(w)&lt;/code&gt;, and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x)&lt;/code&gt; permissions for the user. When one of these characters is a hyphen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-)&lt;/code&gt; instead, it indicates that this permission is not granted to the user.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5th-7th characters:&lt;/strong&gt; These characters indicate the read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(r)&lt;/code&gt;, write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(w)&lt;/code&gt;, and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x)&lt;/code&gt; permissions for the group. When one of these characters is a hyphen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-)&lt;/code&gt; instead, it indicates that this permission is not granted for the group.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;8th-10th characters:&lt;/strong&gt; These characters indicate the read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(r)&lt;/code&gt;, write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(w)&lt;/code&gt;, and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x)&lt;/code&gt; permissions for other. This owner type consists of all other users on the system apart from the user and the group. When one of these characters is a hyphen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-)&lt;/code&gt; instead, that indicates that this permission is not granted for other.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, the file permissions for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project_t.txt&lt;/code&gt; are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-rw-rw-r--&lt;/code&gt;. Since the first character is a hyphen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-)&lt;/code&gt;, this indicates that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project_t.txt&lt;/code&gt; is a file, not a directory. The second, fifth, and eighth characters are all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt;, which indicates that user, group, and other all have read permissions. The third and sixth characters are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt;, which indicates that only the user and group have write permissions. No one has execute permissions for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project_t.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;change-file-permissions&quot;&gt;Change File Permissions&lt;/h2&gt;

&lt;p&gt;The organization determined that other shouldn’t have write access to any of their files. To comply with this, I referred to the file permissions that I previously returned. I determined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project_k.txt&lt;/code&gt; must have the write access removed for other.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how I used Linux commands to do this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\file-permissions-in-linux\change-file-permissions.png&quot; alt=&quot;A screenshot of Linux commands to change file permissions.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first two lines of the screenshot display the commands I entered, and the other lines display the output of the second command. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt; command changes the permissions on files and directories. The first argument indicates what permissions should be changed, and the second argument specifies the file or directory. In this example, I removed write permissions from other for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project_k.txt&lt;/code&gt; file. After this, I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -la&lt;/code&gt; to review the updates I made.&lt;/p&gt;

&lt;h2 id=&quot;change-file-permissions-on-a-hidden-file&quot;&gt;Change File Permissions On A Hidden File&lt;/h2&gt;

&lt;p&gt;The research team at my organization recently archived &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project_x.txt&lt;/code&gt;. They do not want anyone to have write access to this project, but the user and group should have read access.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how I used Linux commands to change the permissions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\file-permissions-in-linux\change-file-permissions-on-a-hidden-file.png&quot; alt=&quot;A screenshot of Linux commands to change file permissions on a hidden file.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first two lines of the screenshot display the commands I entered, and the other lines display the output of the second command. I know &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.project_x.txt&lt;/code&gt; is a hidden file because it starts with a period &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.)&lt;/code&gt;. In this example, I removed write permissions from the user and group, and added read permissions to the group. I removed write permissions from the user with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u-w&lt;/code&gt;. Then, I removed write permissions from the group with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g-w&lt;/code&gt;, and added read permissions to the group with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g+r&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;change-directory-permissions&quot;&gt;Change Directory Permissions&lt;/h2&gt;

&lt;p&gt;My organization only wants the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;researcher2&lt;/code&gt; user to have access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drafts&lt;/code&gt; directory and its contents. This means that no one other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;researcher2&lt;/code&gt; should have execute permissions.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how I used Linux commands to change the permissions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\file-permissions-in-linux\change-directory-permissions.png&quot; alt=&quot;A screenshot of Linux commands to change directory permissions.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first two lines of the screenshot display the commands I entered, and the other lines display the output of the second command. I previously determined that the group had execute permissions, so I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt; command to remove them. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;researcher2&lt;/code&gt; user already had execute permissions, so they did not need to be added.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I changed multiple permissions to match the level of authorization my organization wanted for files and directories in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projects&lt;/code&gt; directory. The first step in this was using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -la&lt;/code&gt; to check the permissions for the directory. This informed my decisions in the following steps. I then used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt; command multiple times to change the permissions on files and directories.&lt;/p&gt;

&lt;h2 id=&quot;credentials&quot;&gt;Credentials&lt;/h2&gt;

&lt;p&gt;The skills and knowledge demonstrated in this article were acquired from my &lt;a href=&quot;https://www.coursera.org/account/accomplishments/specialization/certificate/AZYF4ATWUNXF&quot; target=&quot;_blank&quot;&gt;Google Cybersecurity Certificate&lt;/a&gt;. Feel free to view it for verification.&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">Description The research team at my organization needs to update the file permissions for certain files and directories within the projects directory. The permissions do not currently reflect the level of authorization that should be given. Checking and updating these permissions will help keep their system secure. To complete this task, I performed the following tasks: Check File and Directory Details The following code demonstrates how I used Linux commands to determine the existing permissions set for a specific directory in the file system. The first line of the screenshot displays the command I entered, and the other lines display the output. The code lists all contents of the projects directory. I used the ls command with the -la option to display a detailed listing of the file contents that also returned hidden files. The output of my command indicates that there is one directory named drafts, one hidden file named .project_x.txt, and five other project files. The 10-character string in the first column represents the permissions set on each file or directory. Describe the Permissions String The 10-character string can be deconstructed to determine who is authorized to access the file and their specific permissions. The characters and what they represent are as follows: 1st character: This character is either a d or hyphen (-) and indicates the file type. If it’s a d, it’s a directory. If it’s a hyphen (-), it’s a regular file. 2nd-4th characters: These characters indicate the read (r), write (w), and execute (x) permissions for the user. When one of these characters is a hyphen (-) instead, it indicates that this permission is not granted to the user. 5th-7th characters: These characters indicate the read (r), write (w), and execute (x) permissions for the group. When one of these characters is a hyphen (-) instead, it indicates that this permission is not granted for the group. 8th-10th characters: These characters indicate the read (r), write (w), and execute (x) permissions for other. This owner type consists of all other users on the system apart from the user and the group. When one of these characters is a hyphen (-) instead, that indicates that this permission is not granted for other. For example, the file permissions for project_t.txt are -rw-rw-r--. Since the first character is a hyphen (-), this indicates that project_t.txt is a file, not a directory. The second, fifth, and eighth characters are all r, which indicates that user, group, and other all have read permissions. The third and sixth characters are w, which indicates that only the user and group have write permissions. No one has execute permissions for project_t.txt. Change File Permissions The organization determined that other shouldn’t have write access to any of their files. To comply with this, I referred to the file permissions that I previously returned. I determined project_k.txt must have the write access removed for other. The following code demonstrates how I used Linux commands to do this: The first two lines of the screenshot display the commands I entered, and the other lines display the output of the second command. The chmod command changes the permissions on files and directories. The first argument indicates what permissions should be changed, and the second argument specifies the file or directory. In this example, I removed write permissions from other for the project_k.txt file. After this, I used ls -la to review the updates I made. Change File Permissions On A Hidden File The research team at my organization recently archived project_x.txt. They do not want anyone to have write access to this project, but the user and group should have read access. The following code demonstrates how I used Linux commands to change the permissions: The first two lines of the screenshot display the commands I entered, and the other lines display the output of the second command. I know .project_x.txt is a hidden file because it starts with a period (.). In this example, I removed write permissions from the user and group, and added read permissions to the group. I removed write permissions from the user with u-w. Then, I removed write permissions from the group with g-w, and added read permissions to the group with g+r. Change Directory Permissions My organization only wants the researcher2 user to have access to the drafts directory and its contents. This means that no one other than researcher2 should have execute permissions. The following code demonstrates how I used Linux commands to change the permissions: The first two lines of the screenshot display the commands I entered, and the other lines display the output of the second command. I previously determined that the group had execute permissions, so I used the chmod command to remove them. The researcher2 user already had execute permissions, so they did not need to be added. Summary I changed multiple permissions to match the level of authorization my organization wanted for files and directories in the projects directory. The first step in this was using ls -la to check the permissions for the directory. This informed my decisions in the following steps. I then used the chmod command multiple times to change the permissions on files and directories. Credentials The skills and knowledge demonstrated in this article were acquired from my Google Cybersecurity Certificate. Feel free to view it for verification.</summary></entry><entry><title type="html">Incident Report Analysis</title><link href="http://localhost:4000/jekyll/update/2023/10/23/incident-report-analysis.html" rel="alternate" type="text/html" title="Incident Report Analysis" /><published>2023-10-23T00:00:00-04:00</published><updated>2023-10-23T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2023/10/23/incident-report-analysis</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/10/23/incident-report-analysis.html">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The company experienced a security event when all network services suddenly stopped responding. The cybersecurity team found the disruption was caused by a distributed denial of services (DDoS) attack through a flood of incoming ICMP packets. The team responded by blocking the attack and stopping all non-critical network services, so that critical network services could be restored.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Identify&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A malicious actor or actors targeted the company with an ICMP flood attack. The entire internal network was affected. All critical network resources needed to be secured and restored to a functioning state.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Protect&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The cybersecurity team implemented a new firewall rule to limit the rate of incoming ICMP packets and an IDS/IPS system to filter out some ICMP traffic based on suspicious characteristics.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Detect&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The cybersecurity team configured source IP address verification on the firewall to check for spoofed IP addresses on incoming ICMP packets and implemented network monitoring software to detect abnormal traffic patterns.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Respond&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;For future security events, the cybersecurity team will isolate affected systems to prevent further disruption to the network. They will attempt to restore any critical systems and services that were disrupted by the event. Then, the team will analyze network logs to check for suspicious and abnormal activity. The team will also report all incidents to upper management and appropriate legal authorities, if applicable.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Recover&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;To recover from a DDoS attack by ICMP flooding, access to network services need to be restored to a normal functioning state. In the future, external ICMP flood attacks can be blocked at the firewall. Then, all non-critical network services should be stopped to reduce internal network traffic. Next, critical network services should be restored first. Finally, once the flood of ICMP packets have timed out, all non-critical network systems and services can be brought back online.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;reflection-on-the-incident-report-analysis&quot;&gt;Reflection on the Incident Report Analysis&lt;/h2&gt;

&lt;p&gt;From the incident report analysis, I have gained comprehensive insights into the multifaceted nature of cybersecurity incident management. The event underscored the importance of a structured and well-coordinated response to a security breach, especially when confronted with a DDoS attack. Here is what I have gleaned and the implications of the applications:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Proactive Identification:&lt;/strong&gt; Recognizing threats quickly, as seen in the “Identify” phase, is paramount. The ability to discern that a DDoS attack was in progress, specifically an ICMP flood, allowed for a more targeted response. This emphasizes the need for constant vigilance and monitoring.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Immediate Protection:&lt;/strong&gt; The “Protect” phase highlighted the importance of having preventive measures and the agility to adjust configurations on the fly. The team mitigated further damages by swiftly implementing new firewall rules and leveraging IDS/IPS systems.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Detection Mechanisms:&lt;/strong&gt; The “Detect” section emphasized the significance of proactive monitoring and verification mechanisms. Tools that discern irregularities, like spoofed IP addresses, become invaluable assets in maintaining a secure network environment.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Structured Response:&lt;/strong&gt; Reacting to an incident involves more than immediate countermeasures. The “Respond” phase outlined the broader scope of actions, including system isolation, restoration, and stakeholder communication. This holistic approach ensures that the organization remains informed and prepared while technical challenges are addressed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recovery and Resilience:&lt;/strong&gt; The final “Recover” step underscored the need for a strategic approach to system restoration. Beyond just bringing systems back online, there is an evident emphasis on doing so methodically, prioritizing critical services, and ensuring future resilience against similar attacks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In conclusion, this incident report analysis has reinforced the understanding that cybersecurity is not just about prevention but also about effective management when breaches occur. The structured approach to identifying, protecting, detecting, responding, and recovering provides a robust framework that ensures the organization’s technical safety, operational continuity, and reputation integrity.&lt;/p&gt;

&lt;h2 id=&quot;credentials&quot;&gt;Credentials&lt;/h2&gt;

&lt;p&gt;The skills and knowledge demonstrated in this article were acquired from my &lt;a href=&quot;https://www.coursera.org/account/accomplishments/specialization/certificate/AZYF4ATWUNXF&quot; target=&quot;_blank&quot;&gt;Google Cybersecurity Certificate&lt;/a&gt;. Feel free to view it for verification.&lt;/p&gt;</content><author><name>Jomael Ortiz Perez (0xjoma)</name></author><category term="jekyll" /><category term="update" /><summary type="html">    Summary The company experienced a security event when all network services suddenly stopped responding. The cybersecurity team found the disruption was caused by a distributed denial of services (DDoS) attack through a flood of incoming ICMP packets. The team responded by blocking the attack and stopping all non-critical network services, so that critical network services could be restored. Identify A malicious actor or actors targeted the company with an ICMP flood attack. The entire internal network was affected. All critical network resources needed to be secured and restored to a functioning state. Protect The cybersecurity team implemented a new firewall rule to limit the rate of incoming ICMP packets and an IDS/IPS system to filter out some ICMP traffic based on suspicious characteristics. Detect The cybersecurity team configured source IP address verification on the firewall to check for spoofed IP addresses on incoming ICMP packets and implemented network monitoring software to detect abnormal traffic patterns. Respond For future security events, the cybersecurity team will isolate affected systems to prevent further disruption to the network. They will attempt to restore any critical systems and services that were disrupted by the event. Then, the team will analyze network logs to check for suspicious and abnormal activity. The team will also report all incidents to upper management and appropriate legal authorities, if applicable. Recover To recover from a DDoS attack by ICMP flooding, access to network services need to be restored to a normal functioning state. In the future, external ICMP flood attacks can be blocked at the firewall. Then, all non-critical network services should be stopped to reduce internal network traffic. Next, critical network services should be restored first. Finally, once the flood of ICMP packets have timed out, all non-critical network systems and services can be brought back online. Reflection on the Incident Report Analysis From the incident report analysis, I have gained comprehensive insights into the multifaceted nature of cybersecurity incident management. The event underscored the importance of a structured and well-coordinated response to a security breach, especially when confronted with a DDoS attack. Here is what I have gleaned and the implications of the applications: Proactive Identification: Recognizing threats quickly, as seen in the “Identify” phase, is paramount. The ability to discern that a DDoS attack was in progress, specifically an ICMP flood, allowed for a more targeted response. This emphasizes the need for constant vigilance and monitoring. Immediate Protection: The “Protect” phase highlighted the importance of having preventive measures and the agility to adjust configurations on the fly. The team mitigated further damages by swiftly implementing new firewall rules and leveraging IDS/IPS systems. Detection Mechanisms: The “Detect” section emphasized the significance of proactive monitoring and verification mechanisms. Tools that discern irregularities, like spoofed IP addresses, become invaluable assets in maintaining a secure network environment. Structured Response: Reacting to an incident involves more than immediate countermeasures. The “Respond” phase outlined the broader scope of actions, including system isolation, restoration, and stakeholder communication. This holistic approach ensures that the organization remains informed and prepared while technical challenges are addressed. Recovery and Resilience: The final “Recover” step underscored the need for a strategic approach to system restoration. Beyond just bringing systems back online, there is an evident emphasis on doing so methodically, prioritizing critical services, and ensuring future resilience against similar attacks. In conclusion, this incident report analysis has reinforced the understanding that cybersecurity is not just about prevention but also about effective management when breaches occur. The structured approach to identifying, protecting, detecting, responding, and recovering provides a robust framework that ensures the organization’s technical safety, operational continuity, and reputation integrity. Credentials The skills and knowledge demonstrated in this article were acquired from my Google Cybersecurity Certificate. Feel free to view it for verification.</summary></entry></feed>